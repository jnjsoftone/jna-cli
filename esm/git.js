import e from"path";import{execSync as o}from"child_process";import{sleep as t,loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{PLATFORM as n}from"./cli.js";import{githubEnv as l,localEnvRoot as c}from"./env.js";let s=async(e,o="local")=>"local"===o?i(`${c}/Apis/github.json`)[e]:"github"===o?(await r("Apis/github.json",l))[e]:void 0,a=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,m=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:i,isPrivate:r}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:i,private:r,auto_init:!0})},g=(e,o,t)=>{let{name:i}=o;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:t.userName,repo:i})},p=(e,t,i)=>{let r=`cd ${i} && git config user.name "${t.fullName}"`;console.log(r+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`),o(r)},d=(e,t,i)=>{let{name:r}=e,{fullName:n,email:l,token:c,userName:s}=t,a=`cd ${i} && git init`;o(a);try{a="git branch -m master main",o(a)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(a=`git config user.name "${n}" && git config user.email "${l}" && git remote add origin https://${c}@github.com/${s}/${r}.git && git add . && git commit -m "Initial commit"`),o(a)},u=(t,i,r)=>{let n=`cd ${e.dirname(r)} && git clone https://${i.token}@github.com/${i.userName}/${t.name}.git`;console.log(n),o(n)},$=(e,i,r,n)=>{let l=`xgit -e createRemoteRepo -u ${r.userName} -n ${i.name} -d "${i.description}" -p ${i.isPrivate}`;console.log(`initRepo cmd: ${l}`),o(l),t(10),u(i,r,n),t(5),p(i,r,n)},h=(e,o,i)=>{u(e,o,i),t(10),p(e,o,i)},R=(e,t,i)=>{if(o(`cd ${i}`),o("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),o(e)}let r=o("git branch");console.log(`#### pushRepo branches: ${r}`),r.includes("main")?o("git push -u origin main --force"):r.includes("master")?o("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},f=(e,i,r,n)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(i));let l=`xgit -e createRemoteRepo -u ${r.userName} -n ${i.name} -d "${i.description}" -p ${i.isPrivate}`;console.log(`initRepo cmd: ${l}`),o(l),t(15),console.log(`=================== initLocalRepo: ${n}`),d(i,r,n),t(5),console.log(`=================== pushRepo: ${n}`),R(i,r,n)},b=(i,r,l,c)=>{g(i,r,l),t(10);let{name:s}=r;if("win"===n)try{let t=`cd ${e.dirname(c)}`;console.log(t),o(t);let i=`rmdir /s /q ${s}`;console.log(i),o(i)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${c}"`;console.log("Trying alternative command:",e),o(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let t=`cd ${e.dirname(c)} && rm -rf ${s}`;console.log(t),o(t)}};export{s as findGithubAccount,a as findAllRepos,m as createRemoteRepo,g as deleteRemoteRepo,u as cloneRepo,p as setLocalConfig,d as initLocalRepo,$ as initRepo,h as copyRepo,R as pushRepo,f as makeRepo,b as removeRepo};