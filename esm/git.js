import e from"path";import{execSync as t}from"child_process";import{sleep as o,loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{PLATFORM as n}from"./cli.js";import{localEnvRoot as s}from"./env.js";let c=(e,i={})=>{let{wait:r=0,msg:n="",echo:s=!0}=i;s&&(n=n||e,console.log(`Command: ${n}`));try{t(e),o(r)}catch(e){console.log("EXEC Error: ",e)}},a=async(e,t="github")=>{let{ENV_GITHUB_OWNER:o,ENV_GITHUB_REPO:n,ENV_GITHUB_TOKEN:c}=process.env,a={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===t){let t=await i(`${s}/Apis/github.json`);return t?.[e]}if("github"===t){let t=await r("Apis/github.json",a);return t?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,m=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:i,isPrivate:r}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:i,private:r,auto_init:!0})},p=(e,t,o)=>{let{name:i}=t;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:o.userName,repo:i})},g=(e,t,o)=>{let i=`cd ${o} && git config user.name "${t.fullName}"`;c(i+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)},d=async(e,t,o)=>{let{name:i}=e,{fullName:r,email:s,token:a,userName:l}=t;"win"!=n&&c(`cd ${o} && chmod 777 -R ${o}`,{wait:1});let m="";c(`cd ${o} && git init && git config --global --add safe.directory ${o}`,{wait:1});try{c(`cd ${o} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}c(`cd ${o} && git config user.name "${r}" && git config user.email "${s}" && git remote add origin https://${a}@github.com/${l}/${i}.git && git add . && git commit -m "Initial commit"`,{wait:10})},u=(t,o,i)=>{c(`cd ${e.dirname(i)} && git clone https://${o.token}@github.com/${o.userName}/${t.name}.git`)},$=(e,t,i,r)=>{let n=`xgit -e createRemoteRepo -u ${i.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;c(n,{wait:10,msg:`initRepo ${n}`}),u(t,i,r),o(5),g(t,i,r)},R=(e,t,i)=>{u(e,t,i),o(10),g(e,t,i)},h=(e,o,i)=>{if(t(`cd ${i} && git status --porcelain`,{encoding:"utf8"}).length>0){let e=`cd ${i} && git add . && git commit -m "Initial commit"`;c(e,{msg:`pushRepo ${e}`})}let r=t(`cd ${i} && git branch`);console.log(`#### pushRepo branches: ${r}`),r.includes("main")?c(`cd ${i} && git push -u origin main --force`):r.includes("master")?c(`cd ${i} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},f=(e,t,i,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),c(`xgit -e createRemoteRepo -u ${i.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${r}`),d(t,i,r),o(15),console.log(`=================== pushRepo: ${r}`),h(t,i,r)},N=(t,i,r,s)=>{p(t,i,r),o(10);let{name:a}=i;if("win"===n)try{let t=`cd ${e.dirname(s)}`;c(t);let o=`rmdir /s /q ${a}`;c(o)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${s}"`;c(e)}catch(e){console.error("Alternative removal also failed:",e)}}else c(`cd ${e.dirname(s)} && rm -rf ${a}`)};export{a as findGithubAccount,l as findAllRepos,m as createRemoteRepo,p as deleteRemoteRepo,u as cloneRepo,g as setLocalConfig,d as initLocalRepo,$ as initRepo,R as copyRepo,h as pushRepo,f as makeRepo,N as removeRepo};