import e from"path";import{execSync as o}from"child_process";import{sleep as t,loadJson as r}from"jnu-abc";import{readJsonFromGithub as i}from"jnu-cloud";import{PLATFORM as n}from"./cli.js";import{localEnvRoot as s}from"./env.js";let c=(e,r={})=>{let{wait:i=0,msg:n="",echo:s=!0}=r;s&&(n=n||e,console.log(`Command: ${n}`));try{o(e),t(i)}catch(e){console.log("EXEC Error: ",e)}},a=async(e,o="github")=>{let{ENV_GITHUB_OWNER:t,ENV_GITHUB_REPO:n,ENV_GITHUB_TOKEN:c}=process.env,a={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===o){let o=await r(`${s}/Apis/github.json`);return o?.[e]}if("github"===o){let o=await i("Apis/github.json",a);return o?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,m=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:r,isPrivate:i}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:r,private:i,auto_init:!0})},p=(e,o,t)=>{let{name:r}=o;return console.log(`### deleteRemoteRepo: ${r}`),e.rest.repos.delete({owner:t.userName,repo:r})},g=(e,o,t)=>{let r=`cd ${t} && git config user.name "${o.fullName}"`;c(r+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`)},d=async(e,o,t)=>{let{name:r}=e,{fullName:i,email:n,token:s,userName:a}=o,l="";c(`cd ${t} && git init && git config --global --add safe.directory ${t}`,{wait:1});try{c(`cd ${t} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}l=`cd ${t} && git config user.name "${i}" && git config user.email "${n}" && git remote add origin https://${s}@github.com/${a}/${r}.git`;let m=e.description||"Initial commit";c(l+=` && git add . && git commit -m "${m}"`,{wait:10})},u=(o,t,r)=>{c(`cd ${e.dirname(r)} && git clone https://${t.token}@github.com/${t.userName}/${o.name}.git`)},$=(e,o,r,i)=>{let n=`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;c(n,{wait:10,msg:`initRepo ${n}`}),u(o,r,i),t(5),g(o,r,i)},R=(e,o,r)=>{u(e,o,r),t(10),g(e,o,r)},h=(e,t,r)=>{if(o(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){let o=e.description||"Initial commit",t=`cd ${r} && git add . && git commit -m "${o}"`;c(t,{msg:`pushRepo ${t}`})}let i=o(`cd ${r} && git branch`);console.log(`#### pushRepo branches: ${i}`),i.includes("main")?c(`cd ${r} && git push -u origin main --force`):i.includes("master")?c(`cd ${r} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},f=(e,o,r,i)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(o)),c(`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${i}`),d(o,r,i),t(15),console.log(`=================== pushRepo: ${i}`),h(o,r,i)},N=(o,r,i,s)=>{p(o,r,i),t(10);let{name:a}=r;if("win"===n)try{let o=`cd ${e.dirname(s)}`;c(o);let t=`rmdir /s /q ${a}`;c(t)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${s}"`;c(e)}catch(e){console.error("Alternative removal also failed:",e)}}else c(`cd ${e.dirname(s)} && rm -rf ${a}`)};export{a as findGithubAccount,l as findAllRepos,m as createRemoteRepo,p as deleteRemoteRepo,u as cloneRepo,g as setLocalConfig,d as initLocalRepo,$ as initRepo,R as copyRepo,h as pushRepo,f as makeRepo,N as removeRepo};