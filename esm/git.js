import e from"path";import{execSync as o}from"child_process";import{sleep as t,loadJson as r}from"jnu-abc";import{readJsonFromGithub as i}from"jnu-cloud";import{PLATFORM as n}from"./cli.js";import{localEnvRoot as c}from"./env.js";let s=(e,r={})=>{let{wait:i=0,msg:n="",echo:c=!0}=r;c&&(n=n||e,console.log(`Command: ${n}`));try{o(e),t(i)}catch(e){console.log("EXEC Error: ",e)}},l=async(e,o="github")=>{let{ENV_GITHUB_OWNER:t,ENV_GITHUB_REPO:n,ENV_GITHUB_TOKEN:s}=process.env,l={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===o){let o=await r(`${c}/Apis/github.json`);return o?.[e]}if("github"===o){let o=await i("Apis/github.json",l);return o?.[e]}return}catch(e){if(console.error("GitHub Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},a=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,g=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:r,isPrivate:i}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:r,private:i,auto_init:!0})},m=(e,o,t)=>{let{name:r}=o;return console.log(`### deleteRemoteRepo: ${r}`),e.rest.repos.delete({owner:t.userName,repo:r})},p=(e,o,t)=>{let r=`cd ${t} && git config user.name "${o.fullName}"`;s(r+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`)},u=async(e,o,t)=>{let{name:r}=e,{fullName:i,email:n,token:c,userName:l}=o,a="";s(`cd ${t} && git init && git config --global --add safe.directory ${t}`,{wait:1});try{s(`cd ${t} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}a=`cd ${t} && git config user.name "${i}" && git config user.email "${n}" && git remote add origin https://${c}@github.com/${l}/${r}.git`;let g=e.description||"Initial commit";s(a+=` && git add . && git commit -m "${g}"`,{wait:10})},d=(o,t,r)=>{s(`cd ${e.dirname(r)} && git clone https://${t.token}@github.com/${t.userName}/${o.name}.git`)},$=(e,o,r,i)=>{let n=`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;s(n,{wait:10,msg:`initRepo ${n}`}),d(o,r,i),t(5),p(o,r,i)},h=(e,o,r)=>{d(e,o,r),t(10),p(e,o,r)},f=(e,t,r)=>{if(o(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){let o=e.description||"Initial commit",t=`cd ${r} && git add . && git commit -m "${o}"`;s(t,{msg:`pushRepo ${t}`})}let i=o(`cd ${r} && git branch`);console.log(`#### pushRepo branches: ${i}`),i.includes("main")?s(`cd ${r} && git push -u origin main --force`):i.includes("master")?s(`cd ${r} && git push -u origin master --force`):console.log("main ÎòêÎäî master Î∏åÎûúÏπòÍ∞Ä ÏóÜÏäµÎãàÎã§.")},R=(e,o,r,i)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(o)),s(`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${i}`),u(o,r,i),t(15),console.log(`=================== pushRepo: ${i}`),f(o,r,i)},y=(o,r,i,c)=>{m(o,r,i),t(10);let{name:l}=r;if("win"===n)try{let o=`cd ${e.dirname(c)}`;s(o);let t=`rmdir /s /q ${l}`;s(t)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${c}"`;s(e)}catch(e){console.error("Alternative removal also failed:",e)}}else s(`cd ${e.dirname(c)} && rm -rf ${l}`)},N=(e,t,r)=>{try{let e=o(`cd ${r} && git rev-parse --abbrev-ref HEAD`,{encoding:"utf8"}).trim();console.log(`üì• Pulling latest changes from ${e} branch...`);let t=`cd ${r} && git pull origin ${e}`;s(t,{msg:`pullRepo: ${t}`}),console.log("‚úÖ Pull completed successfully!")}catch(e){throw console.error("‚ùå Pull failed:",e),e}},E=(e,t,r)=>{try{console.log("üîÑ Starting repository synchronization...");let t=o(`cd ${r} && git rev-parse --abbrev-ref HEAD`,{encoding:"utf8"}).trim();if(console.log(`üìç Current branch: ${t}`),o(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){console.log("üìù Local changes detected, committing...");let o=e.description||`Auto-sync: ${new Date().toISOString()}`,t=`cd ${r} && git add . && git commit -m "${o}"`;s(t,{msg:`syncRepo commit: ${t}`})}else console.log("üìã No local changes to commit");console.log("üì• Fetching from remote..."),s(`cd ${r} && git fetch origin ${t}`,{msg:"syncRepo fetch"});try{let e=o(`cd ${r} && git rev-list --count HEAD..origin/${t}`,{encoding:"utf8"}).trim(),i=o(`cd ${r} && git rev-list --count origin/${t}..HEAD`,{encoding:"utf8"}).trim();console.log(`üìä Repository status: ${i} commits ahead, ${e} commits behind`),parseInt(e)>0&&(console.log("üì• Pulling remote changes..."),s(`cd ${r} && git pull origin ${t}`,{msg:"syncRepo pull"})),parseInt(i)>0&&(console.log("üì§ Pushing local changes..."),s(`cd ${r} && git push origin ${t}`,{msg:"syncRepo push"})),0===parseInt(e)&&0===parseInt(i)?console.log("‚úÖ Repository is already up to date!"):console.log("‚úÖ Synchronization completed successfully!")}catch(e){console.log("üì§ Pushing to remote (first time)..."),s(`cd ${r} && git push -u origin ${t}`,{msg:"syncRepo initial push"}),console.log("‚úÖ Initial push completed successfully!")}}catch(e){throw console.error("‚ùå Sync failed:",e),e}};export{l as findGithubAccount,a as findAllRepos,g as createRemoteRepo,m as deleteRemoteRepo,d as cloneRepo,p as setLocalConfig,u as initLocalRepo,$ as initRepo,h as copyRepo,f as pushRepo,R as makeRepo,y as removeRepo,N as pullRepo,E as syncRepo};