import e from"path";import{execSync as o}from"child_process";import{sleep as t,loadJson as i}from"jnu-abc";import{readJsonFromGithub as n}from"jnu-cloud";import{PLATFORM as r}from"./cli.js";let s=(e,o="local")=>{if("local"===o){let o=process.env.DEV_ROOT?`${process.env.DEV_ROOT}/jd-environments`:"C:/JnJ/Developments/jd-environments";return i(`${o}/Apis/github.json`)[e]}if("github"===o)return console.log(`#### ENV_GITHUB_OWNER: ${process.env.ENV_GITHUB_OWNER}`),console.log(`#### ENV_GITHUB_REPO: ${process.env.ENV_GITHUB_REPO}`),console.log(`#### ENV_GITHUB_TOKEN: ${process.env.ENV_GITHUB_TOKEN}`),n("Apis/github.json",{owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""})[e]},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,c=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:i,isPrivate:n}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:i,private:n,auto_init:!0})},a=(e,o,t)=>{let{name:i}=o;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:t.userName,repo:i})},m=(e,t,i)=>{let n=`cd ${i} && git config user.name "${t.fullName}"`;console.log(n+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`),o(n)},p=(e,t,i)=>{let{name:n}=e,{fullName:r,email:s,token:l,userName:c}=t,a=`cd ${i} && git init`;o(a);try{a="git branch -m master main",o(a)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(a=`git config user.name "${r}" && git config user.email "${s}" && git remote add origin https://${l}@github.com/${c}/${n}.git && git add . && git commit -m "Initial commit"`),o(a)},g=(t,i,n)=>{let r=`cd ${e.dirname(n)} && git clone https://${i.token}@github.com/${i.userName}/${t.name}.git`;console.log(r),o(r)},d=(e,i,n,r)=>{let s=`xgit -e createRemoteRepo -u ${n.userName} -n ${i.name} -d "${i.description}" -p ${i.isPrivate}`;console.log(`initRepo cmd: ${s}`),o(s),t(10),g(i,n,r),t(5),m(i,n,r)},u=(e,o,i)=>{g(e,o,i),t(10),m(e,o,i)},$=(e,t,i)=>{if(o(`cd ${i}`),o("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),o(e)}let n=o("git branch");console.log(`#### pushRepo branches: ${n}`),n.includes("main")?o("git push -u origin main --force"):n.includes("master")?o("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},R=(e,i,n,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(i));let s=`xgit -e createRemoteRepo -u ${n.userName} -n ${i.name} -d "${i.description}" -p ${i.isPrivate}`;console.log(`initRepo cmd: ${s}`),o(s),t(15),console.log(`=================== initLocalRepo: ${r}`),p(i,n,r),t(5),console.log(`=================== pushRepo: ${r}`),$(i,n,r)},h=(i,n,s,l)=>{a(i,n,s),t(10);let{name:c}=n;if("win"===r)try{let t=`cd ${e.dirname(l)}`;console.log(t),o(t);let i=`rmdir /s /q ${c}`;console.log(i),o(i)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${l}"`;console.log("Trying alternative command:",e),o(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let t=`cd ${e.dirname(l)} && rm -rf ${c}`;console.log(t),o(t)}};export{s as findGithubAccount,l as findAllRepos,c as createRemoteRepo,a as deleteRemoteRepo,g as cloneRepo,m as setLocalConfig,p as initLocalRepo,d as initRepo,u as copyRepo,$ as pushRepo,R as makeRepo,h as removeRepo};