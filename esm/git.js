import e from"path";import{execSync as t}from"child_process";import{sleep as o,loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{PLATFORM as n}from"./cli.js";import{githubEnv as a,localEnvRoot as c}from"./env.js";let s=(e,i={})=>{let{wait:r=0,msg:n="",echo:a=!0}=i;a&&(n=n||e,console.log(`Command: ${n}`));try{t(e),o(r)}catch(e){console.log("EXEC Error: ",e)}},l=async(e,t="local")=>{if("local"===t)return i(`${c}/Apis/github.json`)[e];if("github"===t){console.log(`### userName: ${e}  githubEnv: ${JSON.stringify(a)}`);let t=await r("Apis/github.json",a);return console.log(`### readJsonFromGithub: ${JSON.stringify(t)} res[userName]: ${t[e]}`),t[e]}},m=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,g=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:i,isPrivate:r}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:i,private:r,auto_init:!0})},p=(e,t,o)=>{let{name:i}=t;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:o.userName,repo:i})},d=(e,t,o)=>{let i=`cd ${o} && git config user.name "${t.fullName}"`;s(i+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)},$=async(e,t,o)=>{let{name:i}=e,{fullName:r,email:a,token:c,userName:l}=t;"win"!=n&&s(`cd ${o} && chmod 777 -R ${o}`,{wait:1});let m="";s(`cd ${o} && git init && git config --global --add safe.directory ${o}`,{wait:1});try{s(`cd ${o} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}s(`cd ${o} && git config user.name "${r}" && git config user.email "${a}" && git remote add origin https://${c}@github.com/${l}/${i}.git && git add . && git commit -m "Initial commit"`,{wait:10})},u=(t,o,i)=>{s(`cd ${e.dirname(i)} && git clone https://${o.token}@github.com/${o.userName}/${t.name}.git`)},h=(e,t,i,r)=>{let n=`xgit -e createRemoteRepo -u ${i.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;s(n,{wait:10,msg:`initRepo ${n}`}),u(t,i,r),o(5),d(t,i,r)},f=(e,t,i)=>{u(e,t,i),o(10),d(e,t,i)},R=(e,o,i)=>{if(t(`cd ${i} && git status --porcelain`,{encoding:"utf8"}).length>0){let e=`cd ${i} && git add . && git commit -m "Initial commit"`;s(e,{msg:`pushRepo ${e}`})}let r=t(`cd ${i} && git branch`);console.log(`#### pushRepo branches: ${r}`),r.includes("main")?s(`cd ${i} && git push -u origin main --force`):r.includes("master")?s(`cd ${i} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},b=(e,t,i,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),s(`xgit -e createRemoteRepo -u ${i.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${r}`),$(t,i,r),o(15),console.log(`=================== pushRepo: ${r}`),R(t,i,r)},y=(t,i,r,a)=>{p(t,i,r),o(10);let{name:c}=i;if("win"===n)try{let t=`cd ${e.dirname(a)}`;s(t);let o=`rmdir /s /q ${c}`;s(o)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${a}"`;s(e)}catch(e){console.error("Alternative removal also failed:",e)}}else s(`cd ${e.dirname(a)} && rm -rf ${c}`)};export{l as findGithubAccount,m as findAllRepos,g as createRemoteRepo,p as deleteRemoteRepo,u as cloneRepo,d as setLocalConfig,$ as initLocalRepo,h as initRepo,f as copyRepo,R as pushRepo,b as makeRepo,y as removeRepo};