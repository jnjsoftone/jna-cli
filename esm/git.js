import e from"path";import{execSync as o}from"child_process";import{sleep as t,loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{PLATFORM as s}from"./cli.js";import{githubEnv as n,localEnvRoot as c}from"./env.js";let a=(e,i={})=>{let{wait:r=0,msg:s="",echo:n=!0}=i;n&&(s=s||e,console.log(`Command: ${s}`));try{o(e),t(r)}catch(e){console.log("EXEC Error: ",e)}},l=async(e,o="local")=>{try{if(process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};if("local"===o){let o=await i(`${c}/Apis/github.json`);return o?.[e]}if("github"===o){console.log(`### userName: ${e}  githubEnv: ${JSON.stringify(n)}`);let o=await r("Apis/github.json",n);return console.log(`### readJsonFromGithub: ${JSON.stringify(o)} res[userName]: ${o[e]}`),o?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},m=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,p=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:i,isPrivate:r}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:i,private:r,auto_init:!0})},g=(e,o,t)=>{let{name:i}=o;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:t.userName,repo:i})},u=(e,o,t)=>{let i=`cd ${t} && git config user.name "${o.fullName}"`;a(i+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`)},d=async(e,o,t)=>{let{name:i}=e,{fullName:r,email:n,token:c,userName:l}=o;"win"!=s&&a(`cd ${t} && chmod 777 -R ${t}`,{wait:1});let m="";a(`cd ${t} && git init && git config --global --add safe.directory ${t}`,{wait:1});try{a(`cd ${t} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}a(`cd ${t} && git config user.name "${r}" && git config user.email "${n}" && git remote add origin https://${c}@github.com/${l}/${i}.git && git add . && git commit -m "Initial commit"`,{wait:10})},$=(o,t,i)=>{a(`cd ${e.dirname(i)} && git clone https://${t.token}@github.com/${t.userName}/${o.name}.git`)},N=(e,o,i,r)=>{let s=`xgit -e createRemoteRepo -u ${i.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;a(s,{wait:10,msg:`initRepo ${s}`}),$(o,i,r),t(5),u(o,i,r)},R=(e,o,i)=>{$(e,o,i),t(10),u(e,o,i)},f=(e,t,i)=>{if(o(`cd ${i} && git status --porcelain`,{encoding:"utf8"}).length>0){let e=`cd ${i} && git add . && git commit -m "Initial commit"`;a(e,{msg:`pushRepo ${e}`})}let r=o(`cd ${i} && git branch`);console.log(`#### pushRepo branches: ${r}`),r.includes("main")?a(`cd ${i} && git push -u origin main --force`):r.includes("master")?a(`cd ${i} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},h=(e,o,i,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(o)),a(`xgit -e createRemoteRepo -u ${i.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${r}`),d(o,i,r),t(15),console.log(`=================== pushRepo: ${r}`),f(o,i,r)},E=(o,i,r,n)=>{g(o,i,r),t(10);let{name:c}=i;if("win"===s)try{let o=`cd ${e.dirname(n)}`;a(o);let t=`rmdir /s /q ${c}`;a(t)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${n}"`;a(e)}catch(e){console.error("Alternative removal also failed:",e)}}else a(`cd ${e.dirname(n)} && rm -rf ${c}`)};export{l as findGithubAccount,m as findAllRepos,p as createRemoteRepo,g as deleteRemoteRepo,$ as cloneRepo,u as setLocalConfig,d as initLocalRepo,N as initRepo,R as copyRepo,f as pushRepo,h as makeRepo,E as removeRepo};