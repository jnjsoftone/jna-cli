import e from"path";import{execSync as t}from"child_process";import{sleep as o,loadJson as r}from"jnu-abc";import{readJsonFromGithub as i}from"jnu-cloud";import{PLATFORM as s}from"./cli.js";import{localEnvRoot as n}from"./env.js";let c=(e,r={})=>{let{wait:i=0,msg:s="",echo:n=!0}=r;n&&(s=s||e,console.log(`Command: ${s}`));try{t(e),o(i)}catch(e){console.log("EXEC Error: ",e)}},a=async(e,t="github")=>{let{ENV_GITHUB_OWNER:o,ENV_GITHUB_REPO:s,ENV_GITHUB_TOKEN:c}=process.env,a={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===t){let t=await r(`${n}/Apis/github.json`);return t?.[e]}if("github"===t){let t=await i("Apis/github.json",a);return t?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,m=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:r,isPrivate:i}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:r,private:i,auto_init:!0})},p=(e,t,o)=>{let{name:r}=t;return console.log(`### deleteRemoteRepo: ${r}`),e.rest.repos.delete({owner:o.userName,repo:r})},g=(e,t,o)=>{let r=`cd ${o} && git config user.name "${t.fullName}"`;c(r+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)};function d(e){return e instanceof Error&&"string"==typeof e.message}let u=async(e,t,o)=>{let{name:r}=e,{fullName:i,email:s,token:n,userName:a}=t;c(`cd ${o} && git init && git config --global --add safe.directory ${o}`,{wait:1});try{c(`cd ${o} && git branch -m master main`,{wait:2})}catch(e){console.log("Branch rename failed (expected for new repos):",d(e)?e.message:String(e))}let l=`cd ${o} && git config user.name "${i}"`;l+=` && git config user.email "${s}"`;try{c(`cd ${o} && git remote add origin https://${n}@github.com/${a}/${r}.git`,{wait:1})}catch(e){if(d(e)&&e.message.includes("remote origin already exists"))console.log("Remote origin exists, updating URL"),c(`cd ${o} && git remote set-url origin https://${n}@github.com/${a}/${r}.git`,{wait:1});else throw console.error("Failed to set up remote:",e),e}let m=e.description||"Initial commit";c(l+=` && git add . && git commit -m "${m}"`,{wait:10})},$=(t,o,r)=>{c(`cd ${e.dirname(r)} && git clone https://${o.token}@github.com/${o.userName}/${t.name}.git`)},h=(e,t,r,i)=>{let s=`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;c(s,{wait:10,msg:`initRepo ${s}`}),$(t,r,i),o(5),g(t,r,i)},f=(e,t,r)=>{$(e,t,r),o(10),g(e,t,r)},R=(e,o,r)=>{if(t(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){let t=e.description||"Initial commit",o=`cd ${r} && git add . && git commit -m "${t}"`;c(o,{msg:`pushRepo ${o}`})}let i=t(`cd ${r} && git branch`);console.log(`#### pushRepo branches: ${i}`),i.includes("main")?c(`cd ${r} && git push -u origin main --force`):i.includes("master")?c(`cd ${r} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},N=(e,t,r,i)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),c(`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${i}`),u(t,r,i),o(15),console.log(`=================== pushRepo: ${i}`),R(t,r,i)},E=(t,r,i,n)=>{p(t,r,i),o(10);let{name:a}=r;if("win"===s)try{let t=`cd ${e.dirname(n)}`;c(t);let o=`rmdir /s /q ${a}`;c(o)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${n}"`;c(e)}catch(e){console.error("Alternative removal also failed:",e)}}else c(`cd ${e.dirname(n)} && rm -rf ${a}`)};export{a as findGithubAccount,l as findAllRepos,m as createRemoteRepo,p as deleteRemoteRepo,$ as cloneRepo,g as setLocalConfig,u as initLocalRepo,h as initRepo,f as copyRepo,R as pushRepo,N as makeRepo,E as removeRepo};