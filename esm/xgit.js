#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{findAllRepos as a,createRemoteRepo as t,setLocalConfig as s,cloneRepo as p,initLocalRepo as n,deleteRemoteRepo as c,initRepo as m,copyRepo as l,pushRepo as d,makeRepo as u,removeRepo as b}from"./git.js";import{getCurrentDir as g}from"./cli.js";import{githubEnv as N,localEnvRoot as R}from"./env.js";let f=o.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,v=(e,o="local")=>"local"===o?i(`${R}/Apis/github.json`)[e]:"github"===o?(console.log(`#### githubEnv: ${JSON.stringify(N)}`),console.log(`#### readJsonFromGithub: ${JSON.stringify(r("Apis/github.json",N))}`),r("Apis/github.json",N)[e]):void 0;(async()=>{try{var o;let i,r;let N=await v(f.userName??"","github");N.userName=f.userName??"";let R=new e({auth:N.token}),y=(o=f.repoName??"",(r=g()).split("/").pop()!==o&&(r+=`/${o}`),r??"");switch(f.exec){case"listRepos":try{i=await a(R),console.log(JSON.stringify(i,null,2))}catch(e){console.error("저장소 목록 조회 중 오류 발생:",e)}break;case"createRemoteRepo":console.log(`createRemoteRepo: ${f}`),await t(R,{name:f.repoName??"",description:f.description??"",isPrivate:f.isPrivate??!1});break;case"deleteRemoteRepo":await c(R,{name:f.repoName??""},N);break;case"setLocalConfig":s({name:f.repoName??"",description:f.description??""},N,y);break;case"cloneRepo":p({name:f.repoName??"",description:f.description??""},N,y);break;case"initLocalRepo":n({name:f.repoName??"",description:f.description??""},N,y);break;case"initRepo":console.log("====initRepo"),await m(R,{name:f.repoName??"",description:f.description??"",isPrivate:f.isPrivate??!1},N,y);break;case"pushRepo":d({name:f.repoName??"",description:f.description??""},N,y);break;case"copyRepo":l({name:f.repoName??"",description:f.description??"description",isPrivate:f.isPrivate??!1},N,y);break;case"makeRepo":await u(R,{name:f.repoName??"",description:f.description??"",isPrivate:f.isPrivate??!1},N,y);break;case"removeRepo":await b(R,{name:f.repoName??""},N,y)}}catch(e){console.error("Error:",e),process.exit(1)}})();