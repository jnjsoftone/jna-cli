#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{saveFile as t,saveJson as a,makeDir as r}from"jnu-abc";import{findAllRepos as s,findAllUsers as i,findGithubAccount as c,createRemoteRepo as n,setLocalConfig as l,cloneRepo as p,initLocalRepo as d,deleteRemoteRepo as m,initRepo as u,copyRepo as g,pushRepo as f,makeRepo as $,removeRepo as b,pullRepo as N,syncRepo as h}from"./git.js";import{getCurrentDir as y}from"./cli.js";import v from"path";let R=o.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate> -l <location>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command: copyRepo(clone+config)/makeRepo(create+push)/removeRepo(delete)/pull(fetch latest)/sync(auto commit+push+pull)/list(repos)/userlist(users)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).option("l",{alias:"location",default:"./",describe:'For list command: output file paths (comma-separated, e.g., "./_docs/list.md,./_docs/list.json"). For other commands: base directory location for operations',type:"string"}).argv;function w(e,o){let s=e.map(e=>({name:e.name,url:e.html_url,description:e.description||"",created_at:e.created_at,updated_at:e.updated_at}));o.forEach(e=>{let o=v.resolve(e),i=v.dirname(o),c=v.extname(o).toLowerCase();try{if(r(i),".md"===c){let e,a=(e="| sn | name | url | description | created_at | updated_at |\n|----|------|-----|-------------|------------|------------|\n",s.forEach((o,t)=>{let a=o.name||"",r=o.url||"",s=(o.description||"").replace(/\|/g,"\\|"),i=o.created_at?new Date(o.created_at).toISOString().split("T")[0]:"",c=o.updated_at?new Date(o.updated_at).toISOString().split("T")[0]:"";e+=`| ${t+1} | ${a} | ${r} | ${s} | ${i} | ${c} |
`}),e);t(o,a,{overwrite:!0}),console.log(`‚úÖ Markdown table saved to: ${o}`)}else".json"===c?(a(o,s,{overwrite:!0}),console.log(`‚úÖ JSON data saved to: ${o}`)):console.warn(`‚ö†Ô∏è  Unsupported file extension: ${c} for ${o}`)}catch(e){console.error(`‚ùå Failed to save to ${o}:`,e)}})}function k(e,o){let t=v.resolve(o),s=v.dirname(t),i=v.extname(t).toLowerCase();try{r(s),".json"===i?(a(t,e,{overwrite:!0}),console.log(`‚úÖ User data saved to: ${t}`)):console.warn(`‚ö†Ô∏è  Only JSON format is supported for user data: ${t}`)}catch(e){console.error(`‚ùå Failed to save user data to ${t}:`,e)}}(async()=>{try{var o,t;let a,r,v=await c(R.userName??"","github");v||(console.error("GitHub Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."),process.exit(1)),v.userName=R.userName??v.userName,console.log(`@@@ git account: ${JSON.stringify(v)}`);let _=new e({auth:v.token}),P=(o=R.repoName??"",(r=(r=(t=R.location)&&"./"!==t?t.startsWith("/")?t:`${y()}/${t}`:y()).replace(/\/$/,"")).split("/").pop()!==o&&(r+=`/${o}`),r??"");switch(R.exec){case"list":case"listRepos":try{if(a=await s(_),console.log(`üìä Found ${a.length} repositories for user: ${R.userName}`),R.location&&"./"!==R.location){let e=R.location.split(",").map(e=>e.trim());w(a,e)}else w(a,["./_docs/list.md","./_docs/list.json"]);let e=a.slice(0,10);console.log("\nüìã Repository List (showing first 10):"),e.forEach((e,o)=>{console.log(`${o+1}. ${e.name} - ${e.html_url}`),console.log(`   üìù ${e.description||"No description"}`),console.log(`   üìÖ Created: ${new Date(e.created_at).toLocaleDateString()}, Updated: ${new Date(e.updated_at).toLocaleDateString()}
`)}),a.length>10&&console.log(`... and ${a.length-10} more repositories (see output files for complete list)`)}catch(e){console.error("Ï†ÄÏû•ÏÜå Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:",e)}break;case"userlist":try{if(a=await i("github")){let e=Object.keys(a).length;console.log(`üìä Found ${e} users in GitHub account data`),R.location&&"./"!==R.location?k(a,R.location):k(a,"./_docs/users.json"),console.log("\nüë• User List:"),Object.keys(a).forEach((e,o)=>{let t=a[e];console.log(`${o+1}. ${e}`),console.log(`   üìß ${t.email||"No email"}`),console.log(`   üë§ ${t.fullName||"No full name"}
`)})}else console.log("‚ùå No user data found")}catch(e){console.error("ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${R}`),await n(_,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await m(_,{name:R.repoName??""},v);break;case"setLocalConfig":l({name:R.repoName??"",description:R.description??""},v,P);break;case"clone":case"cloneRepo":p({name:R.repoName??"",description:R.description??""},v,P);break;case"initLocalRepo":d({name:R.repoName??"",description:R.description??""},v,P);break;case"initRepo":console.log("====initRepo"),await u(_,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1},v,P);break;case"push":case"pushRepo":f({name:R.repoName??"",description:R.description??""},v,P);break;case"copy":case"copyRepo":g({name:R.repoName??"",description:R.description??"description",isPrivate:R.isPrivate??!1},v,P);break;case"make":case"makeRepo":$(_,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1},v,P);break;case"remove":case"removeRepo":await b(_,{name:R.repoName??""},v,P);break;case"pull":case"pullRepo":N({name:R.repoName??"",description:R.description??""},v,P);break;case"sync":case"syncRepo":h({name:R.repoName??"",description:R.description??""},v,P)}}catch(e){console.error("Error:",e),process.exit(1)}})();