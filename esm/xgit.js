#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{loadJson as i}from"jnu-abc";import{readJsonFromGithub as r}from"jnu-cloud";import{findAllRepos as s,createRemoteRepo as t,setLocalConfig as a,cloneRepo as n,initLocalRepo as p,deleteRemoteRepo as c,initRepo as m,copyRepo as l,pushRepo as d,makeRepo as N,removeRepo as u}from"./git.js";import{getCurrentDir as R}from"./cli.js";let g=o.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,v=async(e,o="github")=>{if("local"===o){let o=process.env.DEV_ROOT?`${process.env.DEV_ROOT}/jd-environments`:"C:/JnJ/Developments/jd-environments";return i(`${o}/Apis/github.json`)[e]}if("github"===o){console.log(`#### ENV_GITHUB_OWNER: ${process.env.ENV_GITHUB_OWNER}`),console.log(`#### ENV_GITHUB_REPO: ${process.env.ENV_GITHUB_REPO}`),console.log(`#### ENV_GITHUB_TOKEN: ${process.env.ENV_GITHUB_TOKEN}`);let o={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""},i=await r("Apis/github.json",o);return console.log(`@@@@ readJsonFromGithub: ${JSON.stringify(i)}`),i[e]}};(async()=>{try{var o;let i,r;let b=await v(g.userName??"","github");b.userName=g.userName??"",console.log(`#### git account: ${JSON.stringify(b)}`);let E=new e({auth:b.token}),f=(o=g.repoName??"",(r=R()).split("/").pop()!==o&&(r+=`/${o}`),r??"");switch(g.exec){case"listRepos":try{i=await s(E),console.log(JSON.stringify(i,null,2))}catch(e){console.error("저장소 목록 조회 중 오류 발생:",e)}break;case"createRemoteRepo":console.log(`createRemoteRepo: ${g}`),await t(E,{name:g.repoName??"",description:g.description??"",isPrivate:g.isPrivate??!1});break;case"deleteRemoteRepo":await c(E,{name:g.repoName??""},b);break;case"setLocalConfig":a({name:g.repoName??"",description:g.description??""},b,f);break;case"cloneRepo":n({name:g.repoName??"",description:g.description??""},b,f);break;case"initLocalRepo":p({name:g.repoName??"",description:g.description??""},b,f);break;case"initRepo":console.log("====initRepo"),await m(E,{name:g.repoName??"",description:g.description??"",isPrivate:g.isPrivate??!1},b,f);break;case"pushRepo":d({name:g.repoName??"",description:g.description??""},b,f);break;case"copyRepo":l({name:g.repoName??"",description:g.description??"description",isPrivate:g.isPrivate??!1},b,f);break;case"makeRepo":await N(E,{name:g.repoName??"",description:g.description??"",isPrivate:g.isPrivate??!1},b,f);break;case"removeRepo":await u(E,{name:g.repoName??""},b,f)}}catch(e){console.error("Error:",e),process.exit(1)}})();