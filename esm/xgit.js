#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{saveFile as t,saveJson as r,makeDir as s}from"jnu-abc";import{findAllRepos as a,findAllUsers as n,findGithubAccount as i,createRemoteRepo as l,setLocalConfig as c,cloneRepo as p,initLocalRepo as u,deleteRemoteRepo as d,initRepo as m,copyRepo as g,pushRepo as f,makeRepo as b,removeRepo as $,pullRepo as w,syncRepo as N,listRepoIssues as h,createRepoIssue as y,updateRepoIssue as k,listRepoProjects as j,createRepoProject as v,createProjectColumn as _,createProjectCard as P,listRepoWorkflows as x,listWorkflowRuns as I,dispatchWorkflow as R}from"./git.js";import{getCurrentDir as q}from"./cli.js";import C from"path";let A=o.usage("Usage: -e <exec> -u <userName> -n <repoName> [options]").option("e",{alias:"exec",default:"copyRepo",describe:"exec command: copyRepo(clone+config)/makeRepo(create+push)/removeRepo(delete)/pull(fetch latest)/sync(auto commit+push+pull)/list(repos)/listAll(all accounts repos)/userlist(users)/issues:list/issues:create/issues:update/projects:list/projects:create/projects:create-column/projects:create-card/actions:list-workflows/actions:list-runs/actions:dispatch",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"GitHub user or organization name",type:"string"}).option("n",{alias:"repoName",describe:"Target repository name",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Create repository as private",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account metadata (local/github)",type:"string"}).option("d",{alias:"description",describe:"General description for repo/project operations",type:"string"}).option("l",{alias:"location",default:"./",describe:"For list commands: comma-separated output files. Otherwise: base directory for repo tasks",type:"string"}).option("title",{describe:"Title for issues, projects, or columns",type:"string"}).option("body",{describe:"Body/description for issues or projects",type:"string"}).option("labels",{describe:"Comma-separated label names",type:"string"}).option("assignees",{describe:"Comma-separated GitHub usernames to assign",type:"string"}).option("assignee",{describe:"Single assignee login for filtering issue lists",type:"string"}).option("milestone",{describe:"Milestone number for issue create/update",type:"number"}).option("issue-number",{describe:"Issue number for update operations",type:"number"}).option("state",{describe:"State filter (open|closed|all)",type:"string"}).option("per-page",{describe:"Pagination size for list APIs",type:"number"}).option("page",{describe:"Pagination page for list APIs",type:"number"}).option("project-name",{describe:"Project title for project create commands",type:"string"}).option("column-name",{describe:"Project column name for column create",type:"string"}).option("project-id",{describe:"Numeric project ID for column/card operations",type:"number"}).option("column-id",{describe:"Numeric column ID for card operations",type:"number"}).option("note",{describe:"Note content for project cards",type:"string"}).option("content-id",{describe:"GitHub content ID (issue/pull) for project cards",type:"number"}).option("content-type",{describe:"Content type for project cards ('Issue' or 'PullRequest')",type:"string"}).option("workflow-id",{describe:"Workflow file ID or filename for Actions commands",type:"string"}).option("ref",{describe:"Git reference (branch/tag) for workflow dispatch",type:"string"}).option("inputs",{describe:"JSON string of workflow dispatch inputs",type:"string"}).option("branch",{describe:"Branch filter for workflow runs",type:"string"}).option("status",{describe:"Status filter for workflow runs",type:"string"}).argv,S=e=>{if(e)return e.split(",").map(e=>e.trim()).filter(Boolean)},O=e=>{if(!e)return;let o=e.trim();return/^\d+$/.test(o)?Number(o):o},L=["open","closed","all"],G=e=>{if(!e)return;let o=e.toLowerCase();return L.includes(o)?o:void 0},D=["open","closed"],E=["completed","action_required","cancelled","failure","neutral","success","skipped","stale","in_progress","queued","requested","waiting","pending"];function U(e,o){let a=e.map(e=>({name:e.name,url:e.html_url,description:e.description||"",created_at:e.created_at,updated_at:e.updated_at}));o.forEach(e=>{let o=C.resolve(e),n=C.dirname(o),i=C.extname(o).toLowerCase();try{if(s(n),".md"===i){let e=function(e){let o=e.length>0&&"account_name"in e[0],t=o?"| sn | account | name | url | description | created_at | updated_at |\n":"| sn | name | url | description | created_at | updated_at |\n";return t+=o?"|----|---------|------|-----|-------------|------------|------------|\n":"|----|------|-----|-------------|------------|------------|\n",e.forEach((e,r)=>{let s=r+1,a=e.name||"",n=e.url||"",i=(e.description||"").replace(/\|/g,"\\|"),l=e.created_at?new Date(e.created_at).toISOString().split("T")[0]:"",c=e.updated_at?new Date(e.updated_at).toISOString().split("T")[0]:"";if(o){let o=e.account_name||"";t+=`| ${s} | ${o} | ${a} | ${n} | ${i} | ${l} | ${c} |
`}else t+=`| ${s} | ${a} | ${n} | ${i} | ${l} | ${c} |
`}),t}(a);t(o,e,{overwrite:!0}),console.log(`✅ Markdown table saved to: ${o}`)}else".json"===i?(r(o,a,{overwrite:!0}),console.log(`✅ JSON data saved to: ${o}`)):console.warn(`⚠️  Unsupported file extension: ${i} for ${o}`)}catch(e){console.error(`❌ Failed to save to ${o}:`,e)}})}function F(e,o){let t=C.resolve(o),a=C.dirname(t),n=C.extname(t).toLowerCase();try{s(a),".json"===n?(r(t,e,{overwrite:!0}),console.log(`✅ User data saved to: ${t}`)):console.warn(`⚠️  Only JSON format is supported for user data: ${t}`)}catch(e){console.error(`❌ Failed to save user data to ${t}:`,e)}}(async()=>{try{var o,t;let r,s,C=await i(A.userName??"","github");C||(console.error(`❌ GitHub 계정 정보를 찾을 수 없습니다: ${A.userName}`),console.log(`💡 다음 중 하나를 시도해보세요:`),console.log(`   1. 계정 설정: xgit -e setAccount -n "Full Name" -e "email@example.com" -t "토큰" -u "${A.userName}"`),console.log(`   2. 다른 계정명으로 시도: xgit -e list -u "다른계정명"`),console.log(`   3. 사용 가능한 계정 목록 확인: xgit -e userlist`),process.exit(1)),console.log(`@@@ git account: ${JSON.stringify(C)}`);let L=new e({auth:C.token}),H=(o=A.repoName??"",(s=(s=(t=A.location)&&"./"!==t?t.startsWith("/")?t:`${q()}/${t}`:q()).replace(/\/$/,"")).split("/").pop()!==o&&(s+=`/${o}`),s??"");switch(A.exec){case"list":case"listRepos":try{if(r=await a(L),console.log(`📊 Found ${r.length} repositories for user: ${A.userName}`),A.location&&"./"!==A.location){let e=A.location.split(",").map(e=>e.trim());U(r,e)}else U(r,["./_docs/list.md","./_docs/list.json"]);let e=r.slice(0,10);console.log("\n📋 Repository List (showing first 10):"),e.forEach((e,o)=>{console.log(`${o+1}. ${e.name} - ${e.html_url}`),console.log(`   📝 ${e.description||"No description"}`),console.log(`   📅 Created: ${new Date(e.created_at).toLocaleDateString()}, Updated: ${new Date(e.updated_at).toLocaleDateString()}
`)}),r.length>10&&console.log(`... and ${r.length-10} more repositories (see output files for complete list)`)}catch(e){e?.status===401||e?.message?.includes("Bad credentials")?(console.warn(`⚠️  인증 실패로 계정 '${A.userName}' 건너뜀 - 토큰을 업데이트하거나 계정 설정을 확인하세요`),console.log(`💡 해결 방법: xgit -e setAccount -n "Full Name" -e "email@example.com" -t "새토큰" -u "${A.userName}"`)):e?.status===403?console.warn(`⚠️  권한 부족으로 계정 '${A.userName}' 건너뜀 - API 사용량 한도 초과이거나 저장소 접근 권한이 없습니다`):console.error(`❌ 계정 '${A.userName}' 저장소 목록 조회 중 오류 발생:`,e?.message||e),r=[]}break;case"userlist":try{if(r=await n("github")){let e=Object.keys(r).length;console.log(`📊 Found ${e} users in GitHub account data`),A.location&&"./"!==A.location?F(r,A.location):F(r,"./_docs/users.json"),console.log("\n👥 User List:"),Object.keys(r).forEach((e,o)=>{let t=r[e];console.log(`${o+1}. ${e}`),console.log(`   📧 ${t.email||"No email"}`),console.log(`   👤 ${t.fullName||"No full name"}
`)})}else console.log("❌ No user data found")}catch(e){console.error("사용자 목록 조회 중 오류 발생:",e)}break;case"listAll":case"listAllRepos":try{let o=await n("github");if(!o){console.log("❌ No user data found");break}let t=Object.keys(o);console.log(`🔍 모든 계정 저장소 조회 시작... (총 ${t.length}개 계정)`);let r=[],s=0,i=0;for(let n of t){let t=o[n];console.log(`
📡 ${n} (${t.email}) 처리 중...`);try{let o=new e({auth:t.token}),i=await a(o),l=i.map(e=>({...e,account_name:n,account_email:t.email,account_full_name:t.fullName}));r=r.concat(l),s++,console.log(`   ✅ ${i.length}개 저장소 조회 완료`)}catch(e){i++,e?.status===401||e?.message?.includes("Bad credentials")?console.log(`   ⚠️  토큰 인증 실패 - 건너뜀`):e?.status===403?console.log(`   ⚠️  권한 부족 - 건너뜀`):console.log(`   ❌ 오류 발생: ${e?.message||"Unknown error"}`)}}if(console.log(`
📊 조회 완료: 성공 ${s}개, 실패 ${i}개 계정`),console.log(`📦 총 ${r.length}개 저장소 발견`),r.length>0){let e=A.location&&"./"!==A.location?A.location.split(",").map(e=>e.trim()):["./_docs/all-repos.md","./_docs/all-repos.json"];U(r,e),console.log("\n📋 계정별 저장소 수:");let o={};r.forEach(e=>{let t=e.account_name;o[t]=(o[t]||0)+1}),Object.entries(o).sort(([,e],[,o])=>o-e).forEach(([e,o],t)=>{console.log(`${t+1}. ${e}: ${o}개`)})}else console.log("❌ 조회된 저장소가 없습니다.")}catch(e){console.error("모든 계정 저장소 조회 중 오류 발생:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${A}`),await l(L,{name:A.repoName??"",description:A.description??"",isPrivate:A.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await d(L,{name:A.repoName??""},C);break;case"setLocalConfig":c({name:A.repoName??"",description:A.description??""},C,H);break;case"clone":case"cloneRepo":p({name:A.repoName??"",description:A.description??""},C,H);break;case"initLocalRepo":u({name:A.repoName??"",description:A.description??""},C,H);break;case"initRepo":console.log("====initRepo"),await m(L,{name:A.repoName??"",description:A.description??"",isPrivate:A.isPrivate??!1},C,H);break;case"push":case"pushRepo":f({name:A.repoName??"",description:A.description??""},C,H);break;case"copy":case"copyRepo":g({name:A.repoName??"",description:A.description??"description",isPrivate:A.isPrivate??!1},C,H);break;case"make":case"makeRepo":b(L,{name:A.repoName??"",description:A.description??"",isPrivate:A.isPrivate??!1},C,H);break;case"remove":case"removeRepo":await $(L,{name:A.repoName??""},C,H);break;case"pull":case"pullRepo":w({name:A.repoName??"",description:A.description??""},C,H);break;case"sync":case"syncRepo":N({name:A.repoName??"",description:A.description??""},C,H);break;case"issues:list":case"issueList":{A.repoName||(console.error("❌ repoName (-n) is required for issue commands."),process.exit(1));let e=A.repoName,o=G(A.state);A.state&&!o&&console.warn(`⚠️  Unknown issue state "${A.state}". Using default.`);let t=S(A.labels),r=A.assignee,s=await h(L,{owner:C.userName,repo:e,state:o,labels:t,assignee:r,perPage:A.perPage,page:A.page});console.log(`📋 Issues for ${e}: ${s.length} found`),s.slice(0,Math.min(s.length,10)).forEach((e,o)=>{console.log(`${o+1}. #${e.number} [${e.state}] ${e.title}`),console.log(`   url: ${e.html_url}`)}),s.length>10&&console.log(`... ${s.length-10} more issues (use --page/--per-page to paginate)`);break}case"issues:create":case"issueCreate":{A.repoName||(console.error("❌ repoName (-n) is required for issue commands."),process.exit(1)),A.title||(console.error("❌ title (--title) is required to create an issue."),process.exit(1));let e=A.repoName,o=S(A.labels),t=S(A.assignees),r=await y(L,{owner:C.userName,repo:e,title:A.title,body:A.body??A.description,labels:o,assignees:t,milestone:A.milestone});console.log(`✅ Issue #${r.number} created: ${r.html_url}`);break}case"issues:update":case"issueUpdate":{let e;A.repoName||(console.error("❌ repoName (-n) is required for issue commands."),process.exit(1)),"number"!=typeof A.issueNumber&&(console.error("❌ issue number (--issue-number) is required for issue updates."),process.exit(1));let o=A.repoName,t=S(A.labels),r=S(A.assignees),s=G(A.state);A.state&&(s&&"all"!==s?e=s:console.warn(`⚠️  Issue state must be 'open' or 'closed' for updates. Ignoring value: ${A.state}`));let a=void 0!==A.milestone?A.milestone>=0?A.milestone:null:void 0,n=await k(L,{owner:C.userName,repo:o,issueNumber:A.issueNumber,title:A.title,body:A.body??A.description,state:e,labels:t,assignees:r,milestone:a});console.log(`✅ Issue #${n.number} updated: ${n.html_url}`);break}case"projects:list":case"projectList":{A.repoName||(console.error("❌ repoName (-n) is required for project commands."),process.exit(1));let e=A.repoName,o=[];if(A.state&&"all"===A.state.toLowerCase()){let[t,r]=await Promise.all([j(L,{owner:C.userName,repo:e,state:"open",perPage:A.perPage}),j(L,{owner:C.userName,repo:e,state:"closed",perPage:A.perPage})]);o=[...t,...r]}else{let t=(e=>{if(!e)return;let o=e.toLowerCase();return D.includes(o)?o:void 0})(A.state);A.state&&!t&&console.warn(`⚠️  Project state must be 'open', 'closed', or 'all'. Ignoring value: ${A.state}`),o=await j(L,{owner:C.userName,repo:e,state:t,perPage:A.perPage})}console.log(`📂 Projects for ${e}: ${o.length} found`),o.forEach((e,o)=>{console.log(`${o+1}. [${e.state}] ${e.name} (id: ${e.id})`),e.html_url&&console.log(`   url: ${e.html_url}`)});break}case"projects:create":case"projectCreate":{A.repoName||(console.error("❌ repoName (-n) is required for project commands."),process.exit(1));let e=A.projectName||A.title;e||(console.error("❌ Provide a project name via --project-name or --title."),process.exit(1));let o=await v(L,{owner:C.userName,repo:A.repoName,name:e,body:A.body??A.description});console.log(`✅ Project created: ${o.name} (id: ${o.id})`),o.html_url&&console.log(`   url: ${o.html_url}`);break}case"projects:create-column":case"projectCreateColumn":{"number"!=typeof A.projectId&&(console.error("❌ project id (--project-id) is required for column creation."),process.exit(1));let e=A.columnName||A.title;e||(console.error("❌ Column name is required via --column-name or --title."),process.exit(1));let o=await _(L,{projectId:A.projectId,name:e});console.log(`✅ Column created: ${o.name} (id: ${o.id})`);break}case"projects:create-card":case"projectCreateCard":{"number"!=typeof A.columnId&&(console.error("❌ column id (--column-id) is required for card creation."),process.exit(1)),A.note||void 0!==A.contentId||(console.error("❌ Provide either --note or both --content-id and --content-type for project cards."),process.exit(1));let e=(e=>{if(!e)return;let o=e.toLowerCase();return"issue"===o?"Issue":"pullrequest"===o||"pull_request"===o||"pr"===o?"PullRequest":void 0})(A.contentType);void 0===A.contentId||e||(console.error("❌ --content-type must be Issue or PullRequest when --content-id is supplied."),process.exit(1));let o=await P(L,{columnId:A.columnId,note:A.note,contentId:A.contentId,contentType:e});console.log(`✅ Card created in column ${A.columnId} (id: ${o.id})`);break}case"actions:list-workflows":case"actions:listWorkflows":case"workflow:list":{A.repoName||(console.error("❌ repoName (-n) is required for Actions commands."),process.exit(1));let e=await x(L,{owner:C.userName,repo:A.repoName,perPage:A.perPage,page:A.page});if(!e||0===e.length){console.log(`ℹ️  No workflows found for ${A.repoName}.`);break}e.forEach(e=>{console.log(`#${e.id} ${e.name} [${e.state}] - ${e.path}`)});break}case"actions:list-runs":case"actions:listRuns":case"workflow:runs":{A.repoName||(console.error("❌ repoName (-n) is required for Actions commands."),process.exit(1));let e=(e=>{if(!e)return;let o=e.toLowerCase();return E.includes(o)?o:void 0})(A.status);A.status&&!e&&console.warn(`⚠️  Unknown workflow status "${A.status}". Ignoring filter.`);let o=O(A.workflowId),t=await I(L,{owner:C.userName,repo:A.repoName,workflowId:o,branch:A.branch,status:e,perPage:A.perPage,page:A.page});if(!t||0===t.length){console.log(`ℹ️  No workflow runs found for ${A.repoName}.`);break}t.forEach(e=>{let o=e.conclusion?`/${e.conclusion}`:"";console.log(`#${e.id} ${e.name} @ ${e.head_branch} [${e.status}${o}]`),console.log(`   event=${e.event} updated=${e.updated_at}`),console.log(`   url: ${e.html_url}`)});break}case"actions:dispatch":case"workflow:dispatch":{let e;A.repoName||(console.error("❌ repoName (-n) is required for Actions commands."),process.exit(1));let o=O(A.workflowId);if(o||(console.error("❌ workflow id (--workflow-id) is required for dispatch."),process.exit(1)),A.ref||(console.error("❌ ref (--ref) is required for workflow dispatch."),process.exit(1)),A.inputs)try{let o=JSON.parse(A.inputs);o&&"object"==typeof o&&!Array.isArray(o)?e=o:(console.error("❌ --inputs must be a JSON object."),process.exit(1))}catch(e){console.error(`❌ Failed to parse --inputs JSON: ${e?.message||e}`),process.exit(1)}await R(L,{owner:C.userName,repo:A.repoName,workflowId:o,ref:A.ref,inputs:e}),console.log(`✅ Workflow dispatched for ${A.repoName} (${String(o)}) on ${A.ref}`)}}}catch(e){e?.status===401||e?.message?.includes("Bad credentials")?(console.error(`❌ 인증 실패: GitHub 토큰이 유효하지 않습니다. 계정: ${A.userName}`),console.log(`💡 해결 방법: 새로운 GitHub Personal Access Token을 생성하고 설정하세요`),console.log(`   xgit -e setAccount -n "Full Name" -e "email@example.com" -t "새토큰" -u "${A.userName}"`)):e?.status===403?console.error(`❌ 권한 부족: API 사용량 한도 초과이거나 저장소 접근 권한이 없습니다. 계정: ${A.userName}`):A.userName&&""!==A.userName?(console.error(`❌ 예기치 않은 오류 발생:`,e?.message||e),console.log(`🔧 문제가 지속되면 다음을 확인하세요:`),console.log(`   1. 인터넷 연결 상태`),console.log(`   2. GitHub 서비스 상태`),console.log(`   3. 계정 설정 및 토큰 유효성`)):console.error(`❌ 사용자명이 제공되지 않았습니다. -u 옵션을 사용하여 사용자명을 지정하세요`),process.exit(1)}})();