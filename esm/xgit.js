#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{saveFile as t,saveJson as a,makeDir as r}from"jnu-abc";import{findAllRepos as i,findGithubAccount as s,createRemoteRepo as c,setLocalConfig as n,cloneRepo as p,initLocalRepo as l,deleteRemoteRepo as d,initRepo as m,copyRepo as u,pushRepo as g,makeRepo as f,removeRepo as b,pullRepo as N,syncRepo as $}from"./git.js";import{getCurrentDir as h}from"./cli.js";import y from"path";let R=o.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate> -l <location>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command: copyRepo(clone+config)/makeRepo(create+push)/removeRepo(delete)/pull(fetch latest)/sync(auto commit+push+pull)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).option("l",{alias:"location",default:"./",describe:'For list command: output file paths (comma-separated, e.g., "./_docs/list.md,./_docs/list.json"). For other commands: base directory location for operations',type:"string"}).argv;function v(e,o){let i=e.map(e=>({name:e.name,url:e.html_url,description:e.description||"",created_at:e.created_at,updated_at:e.updated_at}));o.forEach(e=>{let o=y.resolve(e),s=y.dirname(o),c=y.extname(o).toLowerCase();try{if(r(s),".md"===c){let e,a=(e="| sn | name | url | description | created_at | updated_at |\n|----|------|-----|-------------|------------|------------|\n",i.forEach((o,t)=>{let a=o.name||"",r=o.url||"",i=(o.description||"").replace(/\|/g,"\\|"),s=o.created_at?new Date(o.created_at).toISOString().split("T")[0]:"",c=o.updated_at?new Date(o.updated_at).toISOString().split("T")[0]:"";e+=`| ${t+1} | ${a} | ${r} | ${i} | ${s} | ${c} |
`}),e);t(o,a,{overwrite:!0}),console.log(`‚úÖ Markdown table saved to: ${o}`)}else".json"===c?(a(o,i,{overwrite:!0}),console.log(`‚úÖ JSON data saved to: ${o}`)):console.warn(`‚ö†Ô∏è  Unsupported file extension: ${c} for ${o}`)}catch(e){console.error(`‚ùå Failed to save to ${o}:`,e)}})}(async()=>{try{var o,t;let a,r,y=await s(R.userName??"","github");y||(console.error("GitHub Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."),process.exit(1)),y.userName=R.userName??y.userName,console.log(`@@@ git account: ${JSON.stringify(y)}`);let k=new e({auth:y.token}),w=(o=R.repoName??"",(r=(r=(t=R.location)&&"./"!==t?t.startsWith("/")?t:`${h()}/${t}`:h()).replace(/\/$/,"")).split("/").pop()!==o&&(r+=`/${o}`),r??"");switch(R.exec){case"list":case"listRepos":try{if(a=await i(k),console.log(`üìä Found ${a.length} repositories for user: ${R.userName}`),R.location&&"./"!==R.location){let e=R.location.split(",").map(e=>e.trim());v(a,e)}else v(a,["./_docs/list.md","./_docs/list.json"]);let e=a.slice(0,10);console.log("\nüìã Repository List (showing first 10):"),e.forEach((e,o)=>{console.log(`${o+1}. ${e.name} - ${e.html_url}`),console.log(`   üìù ${e.description||"No description"}`),console.log(`   üìÖ Created: ${new Date(e.created_at).toLocaleDateString()}, Updated: ${new Date(e.updated_at).toLocaleDateString()}
`)}),a.length>10&&console.log(`... and ${a.length-10} more repositories (see output files for complete list)`)}catch(e){console.error("Ï†ÄÏû•ÏÜå Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${R}`),await c(k,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await d(k,{name:R.repoName??""},y);break;case"setLocalConfig":n({name:R.repoName??"",description:R.description??""},y,w);break;case"clone":case"cloneRepo":p({name:R.repoName??"",description:R.description??""},y,w);break;case"initLocalRepo":l({name:R.repoName??"",description:R.description??""},y,w);break;case"initRepo":console.log("====initRepo"),await m(k,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1},y,w);break;case"push":case"pushRepo":g({name:R.repoName??"",description:R.description??""},y,w);break;case"copy":case"copyRepo":u({name:R.repoName??"",description:R.description??"description",isPrivate:R.isPrivate??!1},y,w);break;case"make":case"makeRepo":f(k,{name:R.repoName??"",description:R.description??"",isPrivate:R.isPrivate??!1},y,w);break;case"remove":case"removeRepo":await b(k,{name:R.repoName??""},y,w);break;case"pull":case"pullRepo":N({name:R.repoName??"",description:R.description??""},y,w);break;case"sync":case"syncRepo":$({name:R.repoName??"",description:R.description??""},y,w)}}catch(e){console.error("Error:",e),process.exit(1)}})();