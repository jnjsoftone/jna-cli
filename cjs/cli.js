"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=exports,r={get PLATFORM(){return i.PLATFORM},get exe(){return g},get exec(){return f},get execOptions(){return d},get getCurrentDir(){return p},get getParentDir(){return m},get initApp(){return x},get removeApp(){return h},get tree(){return w},get unzip(){return _},get zip(){return S}};for(var t in r)Object.defineProperty(e,t,{enumerable:!0,get:Object.getOwnPropertyDescriptor(r,t).get});const n=require("child_process"),o=/*#__PURE__*/u(require("path")),c=require("jnu-cloud"),i=require("jnu-abc"),l=require("./git.js"),s=require("./env.js"),a=/*#__PURE__*/u(require("fs"));function u(e){return e&&e.__esModule?e:{default:e}}const d={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe":"/bin/sh"},p=()=>"win"===i.PLATFORM?((0,n.execSync)("chcp 65001>nul",{shell:"cmd.exe"}),(0,n.execSync)("cd",d).toString().trim().replace(/\\/g,"/")):(0,n.execSync)("pwd",d).toString().trim(),m=()=>"win"===i.PLATFORM?((0,n.execSync)("chcp 65001>nul",{shell:"cmd.exe"}),o.default.dirname((0,n.execSync)("cd",d).toString().trim().replace(/\\/g,"/"))):o.default.dirname((0,n.execSync)("pwd",d).toString().trim()),$=(e,r,t)=>{let n=(0,i.loadEnv)(`${e}/.env.${r}`);if(n){let o=Object.entries(n).map(([e,r])=>({[`{{${e}}}`]:String(r)})).reduce((e,r)=>({...e,...r}),{});(0,i.substituteInFile)(`${e}/${"win"===r?"publish.bat":"publish.sh"}`,{...t,...o})}},f=e=>{let r=(0,n.execSync)(e,{encoding:"utf8"});return r?r.toString().trim():""},g=e=>{let r=[];return e.forEach(e=>r.push(f(e))),r},y=async(e,r=i.PLATFORM,t="github")=>{let{template:o,repoName:a,userName:u,description:f}=e,g="",y="";try{let e=await (0,l.findGithubAccount)(u??"");e?(g=e.fullName,y=e.email):(g=process.env.ENV_GITHUB_OWNER??u??"",y=process.env.ENV_GITHUB_EMAIL??"",console.log("환경변수에서 GitHub 계정 정보를 가져왔습니다."))}catch(e){console.log("GitHub 계정 정보 조회 중 오류가 발생했습니다. 환경변수를 사용합니다:",e),g=process.env.ENV_GITHUB_OWNER??u??"",y=process.env.ENV_GITHUB_EMAIL??""}let h=m(),x=p(),S="";if("github"===t)console.log(`### Copy from Github to Local: Templates/${o} => ${a}`),await (0,c.copyFolderToLocal)(`Templates/${o}`,a,s.githubEnv);else if("local"===t){let e=process.env.DEV_ROOT?`${process.env.DEV_ROOT}/jd-environments/Templates`:"C:/JnJ/Developments/jd-environments/Templates";S="win"===r?`xcopy "${e}\\${o}" "${a}\\" /E /I /H /Y`:`cp -r ${e}/${o} ${a}`,(0,n.execSync)(S,d)}let _=[`${a}/package.json`,`${a}/README.md`,`${a}/docs/workflow.md`,`${a}/manifest.json`,`${a}/publish.sh`,`${a}/publish.bat`],w={"{{name}}":a??"","{{project-name}}":a??"","{{author}}":`${g} <${y}>`,"{{github-id}}":u??"","{{description}}":f||"","{{parent-dir}}":h,"{{current-dir}}":x};for(let e of _)(0,i.substituteInFile)(e,w);if(o.includes("-npm")||o.includes("-webpack"))for(let e of["win","mac"])$(a,e,w);return console.log(S=`cd ${x}/${a} && npm install`),(0,n.execSync)(S,d),console.log(S=`cd ${x}/${a} && xgit -e makeRepo -u ${u} -n ${a} -d "${f}"`),(0,n.execSync)(S,d),e},h=e=>((0,n.execSync)(`xgit -e deleteRemoteRepo -u ${e.userName} -n ${e.repoName}`,d),"win"===i.PLATFORM?(0,n.execSync)(`rmdir /s /q ${e.repoName}`,d):(0,n.execSync)(`rm -rf ${e.repoName}`,d),e),x=async e=>{let{template:r,repoName:t,userName:n,description:o}=e;return r.includes("ts-")||r.includes("typescript-")?await y(e):r.includes("python-")||r.includes("py-")||r.includes("flutter-"),e},S=(e,r)=>{try{let t=o.default.resolve(e),c=o.default.basename(t),l=o.default.dirname(t),s=process.cwd();if("win"===i.PLATFORM)try{process.chdir(l);let e=`${c}_temp`;for(let t of((0,n.execSync)(`xcopy "${c}" "${e}\\" /E /I /H /Y`,d),r?r.split(","):["node_modules","package-lock.json","package.json"])){let r=`${e}/${t}`;try{t.includes("/")?(0,n.execSync)(`rmdir /s /q "${r}"`,d):(0,n.execSync)(`del /q "${r}"`,d)}catch(e){console.log(`Warning: Could not remove ${t}`)}}(0,n.execSync)(`powershell -Command "Compress-Archive -Path '${e}/*' -DestinationPath '${c}.zip' -Force"`,d),(0,n.execSync)(`rmdir /s /q "${e}"`,d)}catch(e){throw console.error("Error during zip operation:",e),e}finally{process.chdir(s)}else try{process.chdir(l);let e=r?r.split(",").map(e=>`"${e.endsWith("/")?"*/"+e+"*":"*/"+e}"`).join(" "):'"*/node_modules/*" ".git/*"';(0,n.execSync)(`zip -r "${c}.zip" "${c}" -x ${e}`,d)}finally{process.chdir(s)}return{folderPath:e,excluded:r}}catch(e){throw console.error("Error in zip function:",e),e}},_=(e,r="__MACOSX/,node_modules/,.DS_Store,.git/")=>{let t=p(),c=[];for(let l of(0,i.findFiles)(e,"*.zip"))try{let e,s=`${t}/_unzip/${o.default.parse(l).name}`;if(console.log(`## extractPath: ${s}`),(0,i.makeDir)(s),"win32"===process.platform)for(let t of(e=`powershell -command "Expand-Archive -Path '${l}' -DestinationPath '${s}' -Force"`,r.split(",").map(e=>e.trim()))){let e=o.default.join(s,t.replace("/",""));t.endsWith("/")?(0,n.execSync)(`if exist "${e}" rmdir /s /q "${e}"`,d):(0,n.execSync)(`if exist "${e}" del /q "${e}"`,d)}else{let t=r.split(",").map(e=>`"${e.trim()}"`).join(" ");e=`unzip -o "${l}" -d "${s}" -x ${t}`}(0,n.execSync)(e),console.log(`압축 해제 완료: ${l} -> ${s}`);let u=(0,i.findFolders)(s).filter(e=>!e.includes("__MACOSX"));if(console.log(`### subFolders: ${u}, subFolders.length: ${u.length}, ${u[0]}`),1===u.length&&u[0].replace(s,"").includes(o.default.parse(l).name)){for(let e of(console.log(`### 중복 폴더 처리 필요: ${u}`),a.default.readdirSync(u[0]))){let r=o.default.join(u[0],e),t=o.default.join(s,e);"win32"===process.platform?(0,n.execSync)(`move "${r}" "${t}"`,d):(0,n.execSync)(`mv "${r}" "${t}"`,d)}"win32"===process.platform?(0,n.execSync)(`rmdir /s /q "${u[0]}"`,d):(0,n.execSync)(`rm -rf "${u[0]}"`,d)}c.push(s)}catch(e){console.error(`'${l}' 압축 해제 중 오류 발생:`,e.message)}return(0,i.deleteFilesInFolder)(t,"__MACOSX/",!0),c.join(",")},w=e=>{if("win"===i.PLATFORM){let r=e.split(",").join("|")||"node_modules|dist|_backups|_drafts|types|docs";try{let e=`powershell -NoProfile -ExecutionPolicy Bypass -Command "$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${r}'"`;console.log("Command: ",e);let t=(0,n.execSync)(e,{encoding:"utf8",stdio:"pipe"});return console.log("Result: ",t),t&&(0,i.saveFile)("tree.txt",t,{overwrite:!0,newFile:!1,encoding:"utf8"}),t||""}catch(e){return console.error("Error executing tree command:",e),""}}{let r=e?`"${e.split(",").join("|")}"`:'"node_modules|dist|_backups|_drafts|types|docs"',t=`tree -I ${r} --dirsfirst -L 3`;try{console.log("Command: ",t);let e=(0,n.execSync)(t,{encoding:"utf8",stdio:"pipe"});return e&&(0,i.saveFile)("tree.txt",e,{overwrite:!0,newFile:!1}),e||""}catch(e){return console.error("Error executing tree command:",e),""}}};