"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,n){for(var t in n)Object.defineProperty(e,t,{enumerable:!0,get:n[t]})}(exports,{PLATFORM:function(){return r.PLATFORM},exe:function(){return f},exec:function(){return $},execOptions:function(){return u},getCurrentDir:function(){return a},getParentDir:function(){return d},initApp:function(){return g},removeApp:function(){return x},tree:function(){return _},unzip:function(){return S},zip:function(){return y}});const e=require("child_process"),n=/*#__PURE__*/l(require("path")),t=require("jnu-cloud"),r=require("jnu-abc"),o=require("./git.js"),c=require("./env.js"),i=/*#__PURE__*/l(require("fs"));function l(e){return e&&e.__esModule?e:{default:e}}const s="jd-environments/Templates",u={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe":"/bin/sh"},a=()=>"win"===r.PLATFORM?((0,e.execSync)("chcp 65001>nul",{shell:"cmd.exe"}),(0,e.execSync)("cd",u).toString().trim().replace(/\\/g,"/")):(0,e.execSync)("pwd",u).toString().trim(),d=()=>"win"===r.PLATFORM?((0,e.execSync)("chcp 65001>nul",{shell:"cmd.exe"}),n.default.dirname((0,e.execSync)("cd",u).toString().trim().replace(/\\/g,"/"))):n.default.dirname((0,e.execSync)("pwd",u).toString().trim()),p=e=>e.endsWith("/")?"*/"+e+"*":"*/"+e,m=(e,n,t)=>{let o=(0,r.loadEnv)(`${e}/.env.${n}`);if(o){let c=Object.entries(o).map(([e,n])=>({[`{{${e}}}`]:String(n)})).reduce((e,n)=>({...e,...n}),{});(0,r.substituteInFile)(`${e}/${"win"===n?"publish.bat":"publish.sh"}`,{...t,...c})}},$=n=>{let t=(0,e.execSync)(n,{encoding:"utf8"});return t?t.toString().trim():""},f=e=>{let n=[];return e.forEach(e=>n.push($(e))),n},h=async(n,i=r.PLATFORM,l="github")=>{let{template:p,repoName:$,userName:f,description:h}=n,{fullName:x,email:g}=(0,o.findGithubAccount)(f??""),y=d(),S=a(),_="";if("github"===l)await (0,t.copyFolderToLocal)(s,$,c.githubEnv);else if("local"===l){let n=process.env.DEV_ROOT?`${process.env.DEV_ROOT}/${s}`:"C:/JnJ/Developments/jd-environments/Templates";_="win"===i?`xcopy "${n}\\${p}" "${$}\\" /E /I /H /Y`:`cp -r ${n}/${p} ${$}`,(0,e.execSync)(_,u)}let w=[`${$}/package.json`,`${$}/README.md`,`${$}/docs/workflow.md`,`${$}/manifest.json`,`${$}/publish.sh`,`${$}/publish.bat`],b={"{{name}}":$??"","{{project-name}}":$??"","{{author}}":`${x} <${g}>`,"{{github-id}}":f??"","{{description}}":h||"","{{parent-dir}}":y,"{{current-dir}}":S};for(let e of w)(0,r.substituteInFile)(e,b);for(let e of["win","mac"])m($,e,b);return console.log(_=`cd ${S}/${$} && npm install`),(0,e.execSync)(_,u),console.log(_=`cd ${S}/${$} && xgit -e makeRepo -u ${f} -n ${$} -d "${h}"`),(0,e.execSync)(_,u),n},x=n=>((0,e.execSync)(`xgit -e deleteRemoteRepo -u ${n.userName} -n ${n.repoName}`,u),"win"===r.PLATFORM?(0,e.execSync)(`rmdir /s /q ${n.repoName}`,u):(0,e.execSync)(`rm -rf ${n.repoName}`,u),n),g=async e=>{let{template:n,repoName:t,userName:r,description:o}=e;switch(n){case"node-simple":case"python-pipenv":break;case"ts-swc-npm":case"ts-webpack-obsidianPlugin":await h(e)}return e},y=(t,o)=>{try{let c=n.default.resolve(t),i=n.default.basename(c),l=n.default.dirname(c),s=process.cwd();if("win"===r.PLATFORM)try{process.chdir(l);let n=`${i}_temp`;for(let t of((0,e.execSync)(`xcopy "${i}" "${n}\\" /E /I /H /Y`,u),o?o.split(","):["node_modules","package-lock.json","package.json"])){let r=`${n}/${t}`;try{t.includes("/")?(0,e.execSync)(`rmdir /s /q "${r}"`,u):(0,e.execSync)(`del /q "${r}"`,u)}catch(e){console.log(`Warning: Could not remove ${t}`)}}(0,e.execSync)(`powershell -Command "Compress-Archive -Path '${n}/*' -DestinationPath '${i}.zip' -Force"`,u),(0,e.execSync)(`rmdir /s /q "${n}"`,u)}catch(e){throw console.error("Error during zip operation:",e),e}finally{process.chdir(s)}else try{process.chdir(l);let n=o?o.split(",").map(e=>`"${p(e)}"`).join(" "):'"*/node_modules/*" ".git/*"';(0,e.execSync)(`zip -r "${i}.zip" "${i}" -x ${n}`,u)}finally{process.chdir(s)}return{folderPath:t,excluded:o}}catch(e){throw console.error("Error in zip function:",e),e}},S=(t,o="__MACOSX/,node_modules/,.DS_Store,.git/")=>{let c=a(),l=[];for(let s of(0,r.findFiles)(t,"*.zip"))try{let t;let a=`${c}/_unzip/${n.default.parse(s).name}`;if(console.log(`## extractPath: ${a}`),(0,r.makeDir)(a),"win32"===process.platform)for(let r of(t=`powershell -command "Expand-Archive -Path '${s}' -DestinationPath '${a}' -Force"`,o.split(",").map(e=>e.trim()))){let t=n.default.join(a,r.replace("/",""));r.endsWith("/")?(0,e.execSync)(`if exist "${t}" rmdir /s /q "${t}"`,u):(0,e.execSync)(`if exist "${t}" del /q "${t}"`,u)}else{let e=o.split(",").map(e=>`"${e.trim()}"`).join(" ");t=`unzip -o "${s}" -d "${a}" -x ${e}`}(0,e.execSync)(t),console.log(`압축 해제 완료: ${s} -> ${a}`);let d=(0,r.findFolders)(a).filter(e=>!e.includes("__MACOSX"));if(console.log(`### subFolders: ${d}, subFolders.length: ${d.length}, ${d[0]}`),1===d.length&&d[0].replace(a,"").includes(n.default.parse(s).name)){for(let t of(console.log(`### 중복 폴더 처리 필요: ${d}`),i.default.readdirSync(d[0]))){let r=n.default.join(d[0],t),o=n.default.join(a,t);"win32"===process.platform?(0,e.execSync)(`move "${r}" "${o}"`,u):(0,e.execSync)(`mv "${r}" "${o}"`,u)}"win32"===process.platform?(0,e.execSync)(`rmdir /s /q "${d[0]}"`,u):(0,e.execSync)(`rm -rf "${d[0]}"`,u)}l.push(a)}catch(e){console.error(`'${s}' 압축 해제 중 오류 발생:`,e.message)}return(0,r.deleteFilesInFolder)(c,"__MACOSX/",!0),l.join(",")},_=n=>{{if("win"===r.PLATFORM){let t=n.split(",").join("|")||"node_modules|dist|_backups|_drafts|types|docs";try{let n=`powershell -NoProfile -ExecutionPolicy Bypass -Command "$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${t}'"`;console.log("Command: ",n);let o=(0,e.execSync)(n,{encoding:"utf8",stdio:"pipe"});return console.log("Result: ",o),o&&(0,r.saveFile)("tree.txt",o,{overwrite:!0,newFile:!1,encoding:"utf8"}),o||""}catch(e){return console.error("Error executing tree command:",e),""}}let t=n?`"${n.split(",").join("|")}"`:'"node_modules|dist|_backups|_drafts|types|docs"',o=`tree -I ${t} --dirsfirst -L 3`;try{console.log("Command: ",o);let n=(0,e.execSync)(o,{encoding:"utf8",stdio:"pipe"});return n&&(0,r.saveFile)("tree.txt",n,{overwrite:!0,newFile:!1}),n||""}catch(e){return console.error("Error executing tree command:",e),""}}};