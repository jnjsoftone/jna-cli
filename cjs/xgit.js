#!/usr/bin/env node
"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0});const o=require("@octokit/rest"),i=(e=require("yargs"))&&e.__esModule?e:{default:e},a=require("./git.js"),r=require("./cli.js"),t=i.default.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv;(async()=>{try{var e;let i,s;let c=await (0,a.findGithubAccount)(t.userName??"","github");c.userName=t.userName??"",console.log(`@@@ git account: ${JSON.stringify(c)}`);let p=new o.Octokit({auth:c.token}),n=(e=t.repoName??"",(s=(0,r.getCurrentDir)()).split("/").pop()!==e&&(s+=`/${e}`),s??"");switch(t.exec){case"list":case"listRepos":try{i=await (0,a.findAllRepos)(p),console.log(JSON.stringify(i,null,2))}catch(e){console.error("저장소 목록 조회 중 오류 발생:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${t}`),await (0,a.createRemoteRepo)(p,{name:t.repoName??"",description:t.description??"",isPrivate:t.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await (0,a.deleteRemoteRepo)(p,{name:t.repoName??""},c);break;case"setLocalConfig":(0,a.setLocalConfig)({name:t.repoName??"",description:t.description??""},c,n);break;case"clone":case"cloneRepo":(0,a.cloneRepo)({name:t.repoName??"",description:t.description??""},c,n);break;case"initLocalRepo":(0,a.initLocalRepo)({name:t.repoName??"",description:t.description??""},c,n);break;case"initRepo":console.log("====initRepo"),await (0,a.initRepo)(p,{name:t.repoName??"",description:t.description??"",isPrivate:t.isPrivate??!1},c,n);break;case"push":case"pushRepo":(0,a.pushRepo)({name:t.repoName??"",description:t.description??""},c,n);break;case"copy":case"copyRepo":(0,a.copyRepo)({name:t.repoName??"",description:t.description??"description",isPrivate:t.isPrivate??!1},c,n);break;case"make":case"makeRepo":(0,a.makeRepo)(p,{name:t.repoName??"",description:t.description??"",isPrivate:t.isPrivate??!1},c,n);break;case"remove":case"removeRepo":await (0,a.removeRepo)(p,{name:t.repoName??""},c,n)}}catch(e){console.error("Error:",e),process.exit(1)}})();