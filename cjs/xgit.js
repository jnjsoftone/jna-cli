#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("@octokit/rest"),o=/*#__PURE__*/s(require("yargs")),t=require("jnu-abc"),a=require("./git.js"),r=require("./cli.js"),i=/*#__PURE__*/s(require("path"));function s(e){return e&&e.__esModule?e:{default:e}}const c=o.default.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate> -l <location>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command: copyRepo(clone+config)/makeRepo(create+push)/removeRepo(delete)/pull(fetch latest)/sync(auto commit+push+pull)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).option("l",{alias:"location",default:"./",describe:'For list command: output file paths (comma-separated, e.g., "./_docs/list.md,./_docs/list.json"). For other commands: base directory location for operations',type:"string"}).argv;function n(e,o){let a=e.map(e=>({name:e.name,url:e.html_url,description:e.description||"",created_at:e.created_at,updated_at:e.updated_at}));o.forEach(e=>{let o=i.default.resolve(e),r=i.default.dirname(o),s=i.default.extname(o).toLowerCase();try{if((0,t.makeDir)(r),".md"===s){let e,r=(e="| sn | name | url | description | created_at | updated_at |\n|----|------|-----|-------------|------------|------------|\n",a.forEach((o,t)=>{let a=o.name||"",r=o.url||"",i=(o.description||"").replace(/\|/g,"\\|"),s=o.created_at?new Date(o.created_at).toISOString().split("T")[0]:"",c=o.updated_at?new Date(o.updated_at).toISOString().split("T")[0]:"";e+=`| ${t+1} | ${a} | ${r} | ${i} | ${s} | ${c} |
`}),e);(0,t.saveFile)(o,r,{overwrite:!0}),console.log(`‚úÖ Markdown table saved to: ${o}`)}else".json"===s?((0,t.saveJson)(o,a,{overwrite:!0}),console.log(`‚úÖ JSON data saved to: ${o}`)):console.warn(`‚ö†Ô∏è  Unsupported file extension: ${s} for ${o}`)}catch(e){console.error(`‚ùå Failed to save to ${o}:`,e)}})}(async()=>{try{var o,t;let i,s,p=await (0,a.findGithubAccount)(c.userName??"","github");p||(console.error("GitHub Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."),process.exit(1)),p.userName=c.userName??p.userName,console.log(`@@@ git account: ${JSON.stringify(p)}`);let l=new e.Octokit({auth:p.token}),d=(o=c.repoName??"",(s=(s=(t=c.location)&&"./"!==t?t.startsWith("/")?t:`${(0,r.getCurrentDir)()}/${t}`:(0,r.getCurrentDir)()).replace(/\/$/,"")).split("/").pop()!==o&&(s+=`/${o}`),s??"");switch(c.exec){case"list":case"listRepos":try{if(i=await (0,a.findAllRepos)(l),console.log(`üìä Found ${i.length} repositories for user: ${c.userName}`),c.location&&"./"!==c.location){let e=c.location.split(",").map(e=>e.trim());n(i,e)}else n(i,["./_docs/list.md","./_docs/list.json"]);let e=i.slice(0,10);console.log("\nüìã Repository List (showing first 10):"),e.forEach((e,o)=>{console.log(`${o+1}. ${e.name} - ${e.html_url}`),console.log(`   üìù ${e.description||"No description"}`),console.log(`   üìÖ Created: ${new Date(e.created_at).toLocaleDateString()}, Updated: ${new Date(e.updated_at).toLocaleDateString()}
`)}),i.length>10&&console.log(`... and ${i.length-10} more repositories (see output files for complete list)`)}catch(e){console.error("Ï†ÄÏû•ÏÜå Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${c}`),await (0,a.createRemoteRepo)(l,{name:c.repoName??"",description:c.description??"",isPrivate:c.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await (0,a.deleteRemoteRepo)(l,{name:c.repoName??""},p);break;case"setLocalConfig":(0,a.setLocalConfig)({name:c.repoName??"",description:c.description??""},p,d);break;case"clone":case"cloneRepo":(0,a.cloneRepo)({name:c.repoName??"",description:c.description??""},p,d);break;case"initLocalRepo":(0,a.initLocalRepo)({name:c.repoName??"",description:c.description??""},p,d);break;case"initRepo":console.log("====initRepo"),await (0,a.initRepo)(l,{name:c.repoName??"",description:c.description??"",isPrivate:c.isPrivate??!1},p,d);break;case"push":case"pushRepo":(0,a.pushRepo)({name:c.repoName??"",description:c.description??""},p,d);break;case"copy":case"copyRepo":(0,a.copyRepo)({name:c.repoName??"",description:c.description??"description",isPrivate:c.isPrivate??!1},p,d);break;case"make":case"makeRepo":(0,a.makeRepo)(l,{name:c.repoName??"",description:c.description??"",isPrivate:c.isPrivate??!1},p,d);break;case"remove":case"removeRepo":await (0,a.removeRepo)(l,{name:c.repoName??""},p,d);break;case"pull":case"pullRepo":(0,a.pullRepo)({name:c.repoName??"",description:c.description??""},p,d);break;case"sync":case"syncRepo":(0,a.syncRepo)({name:c.repoName??"",description:c.description??""},p,d)}}catch(e){console.error("Error:",e),process.exit(1)}})();