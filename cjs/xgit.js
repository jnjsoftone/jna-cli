#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("@octokit/rest"),o=/*#__PURE__*/i(require("yargs")),t=require("jnu-abc"),a=require("./git.js"),s=require("./cli.js"),r=/*#__PURE__*/i(require("path"));function i(e){return e&&e.__esModule?e:{default:e}}const n=o.default.usage("Usage: -e <exec> -u <userName> -n <repoName> -d <description> -p <isPrivate> -l <location>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command: copyRepo(clone+config)/makeRepo(create+push)/removeRepo(delete)/pull(fetch latest)/sync(auto commit+push+pull)/list(repos)/userlist(users)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("p",{alias:"isPrivate",default:!1,describe:"Private Repository",type:"boolean"}).option("s",{alias:"src",default:"local",describe:"Source of Github Account",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).option("l",{alias:"location",default:"./",describe:'For list command: output file paths (comma-separated, e.g., "./_docs/list.md,./_docs/list.json"). For other commands: base directory location for operations',type:"string"}).argv;function c(e,o){let a=e.map(e=>({name:e.name,url:e.html_url,description:e.description||"",created_at:e.created_at,updated_at:e.updated_at}));o.forEach(e=>{let o=r.default.resolve(e),s=r.default.dirname(o),i=r.default.extname(o).toLowerCase();try{if((0,t.makeDir)(s),".md"===i){let e,s=(e="| sn | name | url | description | created_at | updated_at |\n|----|------|-----|-------------|------------|------------|\n",a.forEach((o,t)=>{let a=o.name||"",s=o.url||"",r=(o.description||"").replace(/\|/g,"\\|"),i=o.created_at?new Date(o.created_at).toISOString().split("T")[0]:"",n=o.updated_at?new Date(o.updated_at).toISOString().split("T")[0]:"";e+=`| ${t+1} | ${a} | ${s} | ${r} | ${i} | ${n} |
`}),e);(0,t.saveFile)(o,s,{overwrite:!0}),console.log(`✅ Markdown table saved to: ${o}`)}else".json"===i?((0,t.saveJson)(o,a,{overwrite:!0}),console.log(`✅ JSON data saved to: ${o}`)):console.warn(`⚠️  Unsupported file extension: ${i} for ${o}`)}catch(e){console.error(`❌ Failed to save to ${o}:`,e)}})}function l(e,o){let a=r.default.resolve(o),s=r.default.dirname(a),i=r.default.extname(a).toLowerCase();try{(0,t.makeDir)(s),".json"===i?((0,t.saveJson)(a,e,{overwrite:!0}),console.log(`✅ User data saved to: ${a}`)):console.warn(`⚠️  Only JSON format is supported for user data: ${a}`)}catch(e){console.error(`❌ Failed to save user data to ${a}:`,e)}}(async()=>{try{var o,t;let r,i,p=await (0,a.findGithubAccount)(n.userName??"","github");p||(console.error(`❌ GitHub 계정 정보를 찾을 수 없습니다: ${n.userName}`),console.log(`💡 다음 중 하나를 시도해보세요:`),console.log(`   1. 계정 설정: xgit -e setAccount -n "Full Name" -e "email@example.com" -t "토큰" -u "${n.userName}"`),console.log(`   2. 다른 계정명으로 시도: xgit -e list -u "다른계정명"`),console.log(`   3. 사용 가능한 계정 목록 확인: xgit -e userlist`),process.exit(1)),p.userName=n.userName??p.userName,console.log(`@@@ git account: ${JSON.stringify(p)}`);let u=new e.Octokit({auth:p.token}),d=(o=n.repoName??"",(i=(i=(t=n.location)&&"./"!==t?t.startsWith("/")?t:`${(0,s.getCurrentDir)()}/${t}`:(0,s.getCurrentDir)()).replace(/\/$/,"")).split("/").pop()!==o&&(i+=`/${o}`),i??"");switch(n.exec){case"list":case"listRepos":try{if(r=await (0,a.findAllRepos)(u),console.log(`📊 Found ${r.length} repositories for user: ${n.userName}`),n.location&&"./"!==n.location){let e=n.location.split(",").map(e=>e.trim());c(r,e)}else c(r,["./_docs/list.md","./_docs/list.json"]);let e=r.slice(0,10);console.log("\n📋 Repository List (showing first 10):"),e.forEach((e,o)=>{console.log(`${o+1}. ${e.name} - ${e.html_url}`),console.log(`   📝 ${e.description||"No description"}`),console.log(`   📅 Created: ${new Date(e.created_at).toLocaleDateString()}, Updated: ${new Date(e.updated_at).toLocaleDateString()}
`)}),r.length>10&&console.log(`... and ${r.length-10} more repositories (see output files for complete list)`)}catch(e){e?.status===401||e?.message?.includes("Bad credentials")?(console.warn(`⚠️  인증 실패로 계정 '${n.userName}' 건너뜀 - 토큰을 업데이트하거나 계정 설정을 확인하세요`),console.log(`💡 해결 방법: xgit -e setAccount -n "Full Name" -e "email@example.com" -t "새토큰" -u "${n.userName}"`)):e?.status===403?console.warn(`⚠️  권한 부족으로 계정 '${n.userName}' 건너뜀 - API 사용량 한도 초과이거나 저장소 접근 권한이 없습니다`):console.error(`❌ 계정 '${n.userName}' 저장소 목록 조회 중 오류 발생:`,e?.message||e),r=[]}break;case"userlist":try{if(r=await (0,a.findAllUsers)("github")){let e=Object.keys(r).length;console.log(`📊 Found ${e} users in GitHub account data`),n.location&&"./"!==n.location?l(r,n.location):l(r,"./_docs/users.json"),console.log("\n👥 User List:"),Object.keys(r).forEach((e,o)=>{let t=r[e];console.log(`${o+1}. ${e}`),console.log(`   📧 ${t.email||"No email"}`),console.log(`   👤 ${t.fullName||"No full name"}
`)})}else console.log("❌ No user data found")}catch(e){console.error("사용자 목록 조회 중 오류 발생:",e)}break;case"create":case"createRemoteRepo":console.log(`createRemoteRepo: ${n}`),await (0,a.createRemoteRepo)(u,{name:n.repoName??"",description:n.description??"",isPrivate:n.isPrivate??!1});break;case"del":case"deleteRemoteRepo":await (0,a.deleteRemoteRepo)(u,{name:n.repoName??""},p);break;case"setLocalConfig":(0,a.setLocalConfig)({name:n.repoName??"",description:n.description??""},p,d);break;case"clone":case"cloneRepo":(0,a.cloneRepo)({name:n.repoName??"",description:n.description??""},p,d);break;case"initLocalRepo":(0,a.initLocalRepo)({name:n.repoName??"",description:n.description??""},p,d);break;case"initRepo":console.log("====initRepo"),await (0,a.initRepo)(u,{name:n.repoName??"",description:n.description??"",isPrivate:n.isPrivate??!1},p,d);break;case"push":case"pushRepo":(0,a.pushRepo)({name:n.repoName??"",description:n.description??""},p,d);break;case"copy":case"copyRepo":(0,a.copyRepo)({name:n.repoName??"",description:n.description??"description",isPrivate:n.isPrivate??!1},p,d);break;case"make":case"makeRepo":(0,a.makeRepo)(u,{name:n.repoName??"",description:n.description??"",isPrivate:n.isPrivate??!1},p,d);break;case"remove":case"removeRepo":await (0,a.removeRepo)(u,{name:n.repoName??""},p,d);break;case"pull":case"pullRepo":(0,a.pullRepo)({name:n.repoName??"",description:n.description??""},p,d);break;case"sync":case"syncRepo":(0,a.syncRepo)({name:n.repoName??"",description:n.description??""},p,d)}}catch(e){e?.status===401||e?.message?.includes("Bad credentials")?(console.error(`❌ 인증 실패: GitHub 토큰이 유효하지 않습니다. 계정: ${n.userName}`),console.log(`💡 해결 방법: 새로운 GitHub Personal Access Token을 생성하고 설정하세요`),console.log(`   xgit -e setAccount -n "Full Name" -e "email@example.com" -t "새토큰" -u "${n.userName}"`)):e?.status===403?console.error(`❌ 권한 부족: API 사용량 한도 초과이거나 저장소 접근 권한이 없습니다. 계정: ${n.userName}`):n.userName&&""!==n.userName?(console.error(`❌ 예기치 않은 오류 발생:`,e?.message||e),console.log(`🔧 문제가 지속되면 다음을 확인하세요:`),console.log(`   1. 인터넷 연결 상태`),console.log(`   2. GitHub 서비스 상태`),console.log(`   3. 계정 설정 및 토큰 유효성`)):console.error(`❌ 사용자명이 제공되지 않았습니다. -u 옵션을 사용하여 사용자명을 지정하세요`),process.exit(1)}})();