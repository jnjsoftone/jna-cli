"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,t){for(var o in t)Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}(exports,{cloneRepo:function(){return d},copyRepo:function(){return f},createRemoteRepo:function(){return u},deleteRemoteRepo:function(){return m},findAllRepos:function(){return l},findGithubAccount:function(){return a},initLocalRepo:function(){return g},initRepo:function(){return $},makeRepo:function(){return R},pushRepo:function(){return N},removeRepo:function(){return h},setLocalConfig:function(){return p}});const t=(e=require("path"))&&e.__esModule?e:{default:e},o=require("child_process"),r=require("jnu-abc"),n=require("jnu-cloud"),i=require("./cli.js"),s=require("./env.js"),c=(e,t={})=>{let{wait:n=0,msg:i="",echo:s=!0}=t;s&&(i=i||e,console.log(`Command: ${i}`));try{(0,o.execSync)(e),(0,r.sleep)(n)}catch(e){console.log("EXEC Error: ",e)}},a=async(e,t="local")=>{try{if(process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};if("local"===t){let t=await (0,r.loadJson)(`${s.localEnvRoot}/Apis/github.json`);return t?.[e]}if("github"===t){console.log(`### userName: ${e}  githubEnv: ${JSON.stringify(s.githubEnv)}`);let t=await (0,n.readJsonFromGithub)("Apis/github.json",s.githubEnv);return console.log(`### readJsonFromGithub: ${JSON.stringify(t)} res[userName]: ${t[e]}`),t?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,u=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:r,isPrivate:n}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:r,private:n,auto_init:!0})},m=(e,t,o)=>{let{name:r}=t;return console.log(`### deleteRemoteRepo: ${r}`),e.rest.repos.delete({owner:o.userName,repo:r})},p=(e,t,o)=>{let r=`cd ${o} && git config user.name "${t.fullName}"`;c(r+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)},g=async(e,t,o)=>{let{name:r}=e,{fullName:n,email:s,token:a,userName:l}=t;"win"!=i.PLATFORM&&c(`cd ${o} && chmod 777 -R ${o}`,{wait:1});let u="";c(`cd ${o} && git init && git config --global --add safe.directory ${o}`,{wait:1});try{c(`cd ${o} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}c(`cd ${o} && git config user.name "${n}" && git config user.email "${s}" && git remote add origin https://${a}@github.com/${l}/${r}.git && git add . && git commit -m "Initial commit"`,{wait:10})},d=(e,o,r)=>{c(`cd ${t.default.dirname(r)} && git clone https://${o.token}@github.com/${o.userName}/${e.name}.git`)},$=(e,t,o,n)=>{let i=`xgit -e createRemoteRepo -u ${o.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;c(i,{wait:10,msg:`initRepo ${i}`}),d(t,o,n),(0,r.sleep)(5),p(t,o,n)},f=(e,t,o)=>{d(e,t,o),(0,r.sleep)(10),p(e,t,o)},N=(e,t,r)=>{if((0,o.execSync)(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){let e=`cd ${r} && git add . && git commit -m "Initial commit"`;c(e,{msg:`pushRepo ${e}`})}let n=(0,o.execSync)(`cd ${r} && git branch`);console.log(`#### pushRepo branches: ${n}`),n.includes("main")?c(`cd ${r} && git push -u origin main --force`):n.includes("master")?c(`cd ${r} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},R=(e,t,o,n)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),c(`xgit -e createRemoteRepo -u ${o.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${n}`),g(t,o,n),(0,r.sleep)(15),console.log(`=================== pushRepo: ${n}`),N(t,o,n)},h=(e,o,n,s)=>{m(e,o,n),(0,r.sleep)(10);let{name:a}=o;if("win"===i.PLATFORM)try{let e=`cd ${t.default.dirname(s)}`;c(e);let o=`rmdir /s /q ${a}`;c(o)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${s}"`;c(e)}catch(e){console.error("Alternative removal also failed:",e)}}else c(`cd ${t.default.dirname(s)} && rm -rf ${a}`)};