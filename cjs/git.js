"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=exports,o={get cloneRepo(){return f},get copyRepo(){return R},get createRemoteRepo(){return m},get deleteRemoteRepo(){return d},get findAllRepos(){return p},get findAllUsers(){return w},get findGithubAccount(){return u},get initLocalRepo(){return h},get initRepo(){return y},get makeRepo(){return v},get pullRepo(){return N},get pushRepo(){return b},get removeRepo(){return E},get setLocalConfig(){return $},get syncRepo(){return _}};for(var r in o)Object.defineProperty(t,r,{enumerable:!0,get:Object.getOwnPropertyDescriptor(o,r).get});const i=(e=require("path"))&&e.__esModule?e:{default:e},n=require("child_process"),c=require("jnu-abc"),s=require("jnu-cloud"),l=require("./cli.js"),a=require("./env.js"),g=(e,t={})=>{let{wait:o=0,msg:r="",echo:i=!0}=t;i&&(r=r||e,console.log(`Command: ${r}`));try{(0,n.execSync)(e),(0,c.sleep)(o)}catch(e){console.log("EXEC Error: ",e)}},u=async(e,t="github")=>{let{ENV_GITHUB_OWNER:o,ENV_GITHUB_REPO:r,ENV_GITHUB_TOKEN:i}=process.env,n={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===t){let t=await (0,c.loadJson)(`${a.localEnvRoot}/Apis/github.json`);return t?.[e]}if("github"===t){let t=await (0,s.readJsonFromGithub)("Apis/github.json",n);return t?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},p=async e=>{try{return(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data}catch(e){throw e}},m=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:r,isPrivate:i}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:r,private:i,auto_init:!0})},d=(e,t,o)=>{let{name:r}=t;return console.log(`### deleteRemoteRepo: ${r}`),e.rest.repos.delete({owner:o.userName,repo:r})},$=(e,t,o)=>{let r=`cd ${o} && git config user.name "${t.fullName}"`;g(r+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)},h=async(e,t,o)=>{let{name:r}=e,{fullName:i,email:n,token:c,userName:s}=t,l="";g(`cd ${o} && git init && git config --global --add safe.directory ${o}`,{wait:1});try{g(`cd ${o} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}l=`cd ${o} && git config user.name "${i}" && git config user.email "${n}" && git remote add origin https://${c}@github.com/${s}/${r}.git`;let a=e.description||"Initial commit";g(l+=` && git add . && git commit -m "${a}"`,{wait:10})},f=(e,t,o)=>{g(`cd ${i.default.dirname(o)} && git clone https://${t.token}@github.com/${t.userName}/${e.name}.git`)},y=(e,t,o,r)=>{let i=`xgit -e createRemoteRepo -u ${o.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;g(i,{wait:10,msg:`initRepo ${i}`}),f(t,o,r),(0,c.sleep)(5),$(t,o,r)},R=(e,t,o)=>{f(e,t,o),(0,c.sleep)(10),$(e,t,o)},b=(e,t,o)=>{if((0,n.execSync)(`cd ${o} && git status --porcelain`,{encoding:"utf8"}).length>0){let t=e.description||"Initial commit",r=`cd ${o} && git add . && git commit -m "${t}"`;g(r,{msg:`pushRepo ${r}`})}let r=(0,n.execSync)(`cd ${o} && git branch`);console.log(`#### pushRepo branches: ${r}`),r.includes("main")?g(`cd ${o} && git push -u origin main --force`):r.includes("master")?g(`cd ${o} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},v=(e,t,o,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),g(`xgit -e createRemoteRepo -u ${o.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${r}`),h(t,o,r),(0,c.sleep)(15),console.log(`=================== pushRepo: ${r}`),b(t,o,r)},E=(e,t,o,r)=>{d(e,t,o),(0,c.sleep)(10);let{name:n}=t;if("win"===l.PLATFORM)try{let e=`cd ${i.default.dirname(r)}`;g(e);let t=`rmdir /s /q ${n}`;g(t)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${r}"`;g(e)}catch(e){console.error("Alternative removal also failed:",e)}}else g(`cd ${i.default.dirname(r)} && rm -rf ${n}`)},N=(e,t,o)=>{try{let e=(0,n.execSync)(`cd ${o} && git rev-parse --abbrev-ref HEAD`,{encoding:"utf8"}).trim();console.log(`📥 Pulling latest changes from ${e} branch...`);let t=`cd ${o} && git pull origin ${e}`;g(t,{msg:`pullRepo: ${t}`}),console.log("✅ Pull completed successfully!")}catch(e){throw console.error("❌ Pull failed:",e),e}},_=(e,t,o)=>{try{console.log("🔄 Starting repository synchronization...");let t=(0,n.execSync)(`cd ${o} && git rev-parse --abbrev-ref HEAD`,{encoding:"utf8"}).trim();if(console.log(`📍 Current branch: ${t}`),(0,n.execSync)(`cd ${o} && git status --porcelain`,{encoding:"utf8"}).length>0){console.log("📝 Local changes detected, committing...");let t=e.description||`Auto-sync: ${new Date().toISOString()}`,r=`cd ${o} && git add . && git commit -m "${t}"`;g(r,{msg:`syncRepo commit: ${r}`})}else console.log("📋 No local changes to commit");console.log("📥 Fetching from remote..."),g(`cd ${o} && git fetch origin ${t}`,{msg:"syncRepo fetch"});try{let e=(0,n.execSync)(`cd ${o} && git rev-list --count HEAD..origin/${t}`,{encoding:"utf8"}).trim(),r=(0,n.execSync)(`cd ${o} && git rev-list --count origin/${t}..HEAD`,{encoding:"utf8"}).trim();console.log(`📊 Repository status: ${r} commits ahead, ${e} commits behind`),parseInt(e)>0&&(console.log("📥 Pulling remote changes..."),g(`cd ${o} && git pull origin ${t}`,{msg:"syncRepo pull"})),parseInt(r)>0&&(console.log("📤 Pushing local changes..."),g(`cd ${o} && git push origin ${t}`,{msg:"syncRepo push"})),0===parseInt(e)&&0===parseInt(r)?console.log("✅ Repository is already up to date!"):console.log("✅ Synchronization completed successfully!")}catch(e){console.log("📤 Pushing to remote (first time)..."),g(`cd ${o} && git push -u origin ${t}`,{msg:"syncRepo initial push"}),console.log("✅ Initial push completed successfully!")}}catch(e){throw console.error("❌ Sync failed:",e),e}},w=async(e="github")=>{try{if("local"===e)return await (0,c.loadJson)(`${a.localEnvRoot}/Apis/github.json`);if("github"===e)return await (0,s.readJsonFromGithub)("Apis/github.json",a.githubEnv);return}catch(e){console.error("GitHub 사용자 목록을 가져오는 중 오류가 발생했습니다:",e);return}};