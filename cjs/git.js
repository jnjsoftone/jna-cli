"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,o){for(var t in o)Object.defineProperty(e,t,{enumerable:!0,get:o[t]})}(exports,{cloneRepo:function(){return d},copyRepo:function(){return $},createRemoteRepo:function(){return a},deleteRemoteRepo:function(){return u},findAllRepos:function(){return s},findGithubAccount:function(){return l},initLocalRepo:function(){return m},initRepo:function(){return p},makeRepo:function(){return h},pushRepo:function(){return f},removeRepo:function(){return y},setLocalConfig:function(){return g}});const o=(e=require("path"))&&e.__esModule?e:{default:e},t=require("child_process"),n=require("jnu-abc"),i=require("jnu-cloud"),r=require("./cli.js"),c=require("./env.js"),l=async(e,o="local")=>{if("local"===o)return(0,n.loadJson)(`${c.localEnvRoot}/Apis/github.json`)[e];if("github"===o){console.log(`### userName: ${e}  githubEnv: ${JSON.stringify(c.githubEnv)}`);let o=await (0,i.readJsonFromGithub)("Apis/github.json",c.githubEnv);return console.log(`### readJsonFromGithub: ${JSON.stringify(o)} res[userName]: ${o[e]}`),o[e]}},s=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,a=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:n,isPrivate:i}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:n,private:i,auto_init:!0})},u=(e,o,t)=>{let{name:n}=o;return console.log(`### deleteRemoteRepo: ${n}`),e.rest.repos.delete({owner:t.userName,repo:n})},g=(e,o,n)=>{let i=`cd ${n} && git config user.name "${o.fullName}"`;console.log(i+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`),(0,t.execSync)(i)},m=async(e,o,i)=>{let{name:r}=e,{fullName:c,email:l,token:s,userName:a}=o,u=`cd ${i} && git init`;console.log(u),(0,t.execSync)(u),(0,n.sleep)(10);try{u=`cd ${i} && git branch -m master main`,console.log(u),(0,t.execSync)(u)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(u=`cd ${i} && git config user.name "${c}" && git config user.email "${l}" && git remote add origin https://${s}@github.com/${a}/${r}.git && git add . && git commit -m "Initial commit"`),(0,t.execSync)(u)},d=(e,n,i)=>{let r=`cd ${o.default.dirname(i)} && git clone https://${n.token}@github.com/${n.userName}/${e.name}.git`;console.log(r),(0,t.execSync)(r)},p=(e,o,i,r)=>{let c=`xgit -e createRemoteRepo -u ${i.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,t.execSync)(c),(0,n.sleep)(10),d(o,i,r),(0,n.sleep)(5),g(o,i,r)},$=(e,o,t)=>{d(e,o,t),(0,n.sleep)(10),g(e,o,t)},f=(e,o,n)=>{if((0,t.execSync)(`cd ${n} && git status --porcelain`,{encoding:"utf8"}).length>0){let e=`cd ${n} && git add . && git commit -m "Initial commit"`;console.log("#### ",e),(0,t.execSync)(e)}let i=(0,t.execSync)(`cd ${n} && git branch`);console.log(`#### pushRepo branches: ${i}`),i.includes("main")?(0,t.execSync)(`cd ${n} && git push -u origin main --force`):i.includes("master")?(0,t.execSync)(`cd ${n} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},h=(e,o,i,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(o));let c=`xgit -e createRemoteRepo -u ${i.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,t.execSync)(c),(0,n.sleep)(10),console.log(`=================== initLocalRepo: ${r}`),m(o,i,r),(0,n.sleep)(15),console.log(`=================== pushRepo: ${r}`),f(o,i,r)},y=(e,i,c,l)=>{u(e,i,c),(0,n.sleep)(10);let{name:s}=i;if("win"===r.PLATFORM)try{let e=`cd ${o.default.dirname(l)}`;console.log(e),(0,t.execSync)(e);let n=`rmdir /s /q ${s}`;console.log(n),(0,t.execSync)(n)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${l}"`;console.log("Trying alternative command:",e),(0,t.execSync)(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let e=`cd ${o.default.dirname(l)} && rm -rf ${s}`;console.log(e),(0,t.execSync)(e)}};