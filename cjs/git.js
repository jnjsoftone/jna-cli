"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,o){for(var t in o)Object.defineProperty(e,t,{enumerable:!0,get:o[t]})}(exports,{cloneRepo:function(){return m},copyRepo:function(){return d},createRemoteRepo:function(){return s},deleteRemoteRepo:function(){return a},findAllRepos:function(){return l},findGithubAccount:function(){return c},initLocalRepo:function(){return p},initRepo:function(){return g},makeRepo:function(){return $},pushRepo:function(){return f},removeRepo:function(){return R},setLocalConfig:function(){return u}});const o=(e=require("path"))&&e.__esModule?e:{default:e},t=require("child_process"),n=require("jnu-abc"),r=require("jnu-cloud"),i=require("./cli.js"),c=(e,o="local",t={})=>{if("local"===o){let o=process.env.DEV_ROOT?`${process.env.DEV_ROOT}/jd-environments`:"C:/JnJ/Developments/jd-environments";return(0,n.loadJson)(`${o}/Apis/github.json`)[e]}if("github"===o){let e={owner:process.env.ENV_GIT_OWNER||"",repo:process.env.ENV_GIT_REPO||"",token:process.env.ENV_GIT_TOKEN||""};return(0,r.readJsonFromGithub)("Apis/github.json",e)}},l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,s=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:n,isPrivate:r}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:n,private:r,auto_init:!0})},a=(e,o,t)=>{let{name:n}=o;return console.log(`### deleteRemoteRepo: ${n}`),e.rest.repos.delete({owner:t.userName,repo:n})},u=(e,o,n)=>{let r=`cd ${n} && git config user.name "${o.fullName}"`;console.log(r+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`),(0,t.execSync)(r)},p=(e,o,n)=>{let{name:r}=e,{fullName:i,email:c,token:l,userName:s}=o,a=`cd ${n} && git init`;(0,t.execSync)(a);try{a="git branch -m master main",(0,t.execSync)(a)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(a=`git config user.name "${i}" && git config user.email "${c}" && git remote add origin https://${l}@github.com/${s}/${r}.git && git add . && git commit -m "Initial commit"`),(0,t.execSync)(a)},m=(e,n,r)=>{let i=`cd ${o.default.dirname(r)} && git clone https://${n.token}@github.com/${n.userName}/${e.name}.git`;console.log(i),(0,t.execSync)(i)},g=(e,o,r,i)=>{let c=`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,t.execSync)(c),(0,n.sleep)(10),m(o,r,i),(0,n.sleep)(5),u(o,r,i)},d=(e,o,t)=>{m(e,o,t),(0,n.sleep)(10),u(e,o,t)},f=(e,o,n)=>{if((0,t.execSync)(`cd ${n}`),(0,t.execSync)("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),(0,t.execSync)(e)}let r=(0,t.execSync)("git branch");console.log(`#### pushRepo branches: ${r}`),r.includes("main")?(0,t.execSync)("git push -u origin main --force"):r.includes("master")?(0,t.execSync)("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},$=(e,o,r,i)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(o));let c=`xgit -e createRemoteRepo -u ${r.userName} -n ${o.name} -d "${o.description}" -p ${o.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,t.execSync)(c),(0,n.sleep)(15),console.log(`=================== initLocalRepo: ${i}`),p(o,r,i),(0,n.sleep)(5),console.log(`=================== pushRepo: ${i}`),f(o,r,i)},R=(e,r,c,l)=>{a(e,r,c),(0,n.sleep)(10);let{name:s}=r;if("win"===i.PLATFORM)try{let e=`cd ${o.default.dirname(l)}`;console.log(e),(0,t.execSync)(e);let n=`rmdir /s /q ${s}`;console.log(n),(0,t.execSync)(n)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${l}"`;console.log("Trying alternative command:",e),(0,t.execSync)(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let e=`cd ${o.default.dirname(l)} && rm -rf ${s}`;console.log(e),(0,t.execSync)(e)}};