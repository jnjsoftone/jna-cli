"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=exports,r={get cloneRepo(){return h},get copyRepo(){return N},get createRemoteRepo(){return m},get deleteRemoteRepo(){return d},get findAllRepos(){return g},get findGithubAccount(){return p},get initLocalRepo(){return R},get initRepo(){return f},get makeRepo(){return v},get pushRepo(){return _},get removeRepo(){return E},get setLocalConfig(){return $}};for(var o in r)Object.defineProperty(t,o,{enumerable:!0,get:Object.getOwnPropertyDescriptor(r,o).get});const i=(e=require("path"))&&e.__esModule?e:{default:e},n=require("child_process"),s=require("jnu-abc"),c=require("jnu-cloud"),a=require("./cli.js"),l=require("./env.js"),u=(e,t={})=>{let{wait:r=0,msg:o="",echo:i=!0}=t;i&&(o=o||e,console.log(`Command: ${o}`));try{(0,n.execSync)(e),(0,s.sleep)(r)}catch(e){console.log("EXEC Error: ",e)}},p=async(e,t="github")=>{let{ENV_GITHUB_OWNER:r,ENV_GITHUB_REPO:o,ENV_GITHUB_TOKEN:i}=process.env,n={owner:process.env.ENV_GITHUB_OWNER||"",repo:process.env.ENV_GITHUB_REPO||"",token:process.env.ENV_GITHUB_TOKEN||""};try{if("local"===t){let t=await (0,s.loadJson)(`${l.localEnvRoot}/Apis/github.json`);return t?.[e]}if("github"===t){let t=await (0,c.readJsonFromGithub)("Apis/github.json",n);return t?.[e]}return}catch(e){if(console.error("GitHub 계정 정보를 가져오는 중 오류가 발생했습니다:",e),process.env.ENV_GITHUB_OWNER&&process.env.ENV_GITHUB_TOKEN)return{userName:process.env.ENV_GITHUB_OWNER,fullName:process.env.ENV_GITHUB_OWNER,email:process.env.ENV_GITHUB_EMAIL??"",token:process.env.ENV_GITHUB_TOKEN};return}},g=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,m=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:r,description:o,isPrivate:i}=t;return e.rest.repos.createForAuthenticatedUser({name:r,description:o,private:i,auto_init:!0})},d=(e,t,r)=>{let{name:o}=t;return console.log(`### deleteRemoteRepo: ${o}`),e.rest.repos.delete({owner:r.userName,repo:o})},$=(e,t,r)=>{let o=`cd ${r} && git config user.name "${t.fullName}"`;u(o+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`)},R=async(e,t,r)=>{let{name:o}=e,{fullName:i,email:n,token:s,userName:c}=t;"win"!=a.PLATFORM&&u(`cd ${r} && chmod 777 -R ${r}`,{wait:1});let l="";u(`cd ${r} && git init && git config --global --add safe.directory ${r}`,{wait:1});try{u(`cd ${r} && git branch -m master main`,{wait:2})}catch(e){console.log("####@@@@@===== error: ",e)}l=`cd ${r} && git config user.name "${i}" && git config user.email "${n}" && git remote add origin https://${s}@github.com/${c}/${o}.git`;let p=e.description||"Initial commit";u(l+=` && git add . && git commit -m "${p}"`,{wait:10})},h=(e,t,r)=>{u(`cd ${i.default.dirname(r)} && git clone https://${t.token}@github.com/${t.userName}/${e.name}.git`)},f=(e,t,r,o)=>{let i=`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;u(i,{wait:10,msg:`initRepo ${i}`}),h(t,r,o),(0,s.sleep)(5),$(t,r,o)},N=(e,t,r)=>{h(e,t,r),(0,s.sleep)(10),$(e,t,r)},_=(e,t,r)=>{if((0,n.execSync)(`cd ${r} && git status --porcelain`,{encoding:"utf8"}).length>0){let t=e.description||"Initial commit",o=`cd ${r} && git add . && git commit -m "${t}"`;u(o,{msg:`pushRepo ${o}`})}let o=(0,n.execSync)(`cd ${r} && git branch`);console.log(`#### pushRepo branches: ${o}`),o.includes("main")?u(`cd ${r} && git push -u origin main --force`):o.includes("master")?u(`cd ${r} && git push -u origin master --force`):console.log("main 또는 master 브랜치가 없습니다.")},v=(e,t,r,o)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t)),u(`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`,{wait:10}),console.log(`=================== initLocalRepo: ${o}`),R(t,r,o),(0,s.sleep)(15),console.log(`=================== pushRepo: ${o}`),_(t,r,o)},E=(e,t,r,o)=>{d(e,t,r),(0,s.sleep)(10);let{name:n}=t;if("win"===a.PLATFORM)try{let e=`cd ${i.default.dirname(o)}`;u(e);let t=`rmdir /s /q ${n}`;u(t)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${o}"`;u(e)}catch(e){console.error("Alternative removal also failed:",e)}}else u(`cd ${i.default.dirname(o)} && rm -rf ${n}`)};